// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Matrix_Multiply.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Matrix_Multiply::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Matrix_Multiply::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state1 = "1";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state2 = "10";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state3 = "100";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state4 = "1000";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state5 = "10000";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state6 = "100000";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state7 = "1000000";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state8 = "10000000";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state9 = "100000000";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state10 = "1000000000";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state11 = "10000000000";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state12 = "100000000000";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<21> Matrix_Multiply::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<32> Matrix_Multiply::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Matrix_Multiply::ap_const_lv1_1 = "1";
const int Matrix_Multiply::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> Matrix_Multiply::ap_const_lv32_1 = "1";
const sc_lv<1> Matrix_Multiply::ap_const_lv1_0 = "0";
const sc_lv<32> Matrix_Multiply::ap_const_lv32_2 = "10";
const sc_lv<32> Matrix_Multiply::ap_const_lv32_3 = "11";
const sc_lv<32> Matrix_Multiply::ap_const_lv32_4 = "100";
const sc_lv<32> Matrix_Multiply::ap_const_lv32_6 = "110";
const sc_lv<32> Matrix_Multiply::ap_const_lv32_7 = "111";
const sc_lv<32> Matrix_Multiply::ap_const_lv32_9 = "1001";
const sc_lv<32> Matrix_Multiply::ap_const_lv32_A = "1010";
const sc_lv<32> Matrix_Multiply::ap_const_lv32_B = "1011";
const sc_lv<32> Matrix_Multiply::ap_const_lv32_11 = "10001";
const sc_lv<32> Matrix_Multiply::ap_const_lv32_13 = "10011";
const sc_lv<32> Matrix_Multiply::ap_const_lv32_14 = "10100";
const sc_lv<2> Matrix_Multiply::ap_const_lv2_0 = "00";
const sc_lv<3> Matrix_Multiply::ap_const_lv3_0 = "000";
const sc_lv<32> Matrix_Multiply::ap_const_lv32_5 = "101";
const sc_lv<4> Matrix_Multiply::ap_const_lv4_4 = "100";
const sc_lv<32> Matrix_Multiply::ap_const_lv32_8 = "1000";
const sc_lv<32> Matrix_Multiply::ap_const_lv32_12 = "10010";
const sc_lv<3> Matrix_Multiply::ap_const_lv3_2 = "10";
const sc_lv<4> Matrix_Multiply::ap_const_lv4_0 = "0000";
const sc_lv<4> Matrix_Multiply::ap_const_lv4_F = "1111";
const sc_lv<2> Matrix_Multiply::ap_const_lv2_2 = "10";
const sc_lv<2> Matrix_Multiply::ap_const_lv2_1 = "1";
const sc_lv<3> Matrix_Multiply::ap_const_lv3_1 = "1";
const sc_lv<4> Matrix_Multiply::ap_const_lv4_2 = "10";
const sc_lv<4> Matrix_Multiply::ap_const_lv4_1 = "1";
const sc_lv<32> Matrix_Multiply::ap_const_lv32_C = "1100";

Matrix_Multiply::Matrix_Multiply(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Matrix_Multiply_CRTL_BUS_s_axi_U = new Matrix_Multiply_CRTL_BUS_s_axi<C_S_AXI_CRTL_BUS_ADDR_WIDTH,C_S_AXI_CRTL_BUS_DATA_WIDTH>("Matrix_Multiply_CRTL_BUS_s_axi_U");
    Matrix_Multiply_CRTL_BUS_s_axi_U->AWVALID(s_axi_CRTL_BUS_AWVALID);
    Matrix_Multiply_CRTL_BUS_s_axi_U->AWREADY(s_axi_CRTL_BUS_AWREADY);
    Matrix_Multiply_CRTL_BUS_s_axi_U->AWADDR(s_axi_CRTL_BUS_AWADDR);
    Matrix_Multiply_CRTL_BUS_s_axi_U->WVALID(s_axi_CRTL_BUS_WVALID);
    Matrix_Multiply_CRTL_BUS_s_axi_U->WREADY(s_axi_CRTL_BUS_WREADY);
    Matrix_Multiply_CRTL_BUS_s_axi_U->WDATA(s_axi_CRTL_BUS_WDATA);
    Matrix_Multiply_CRTL_BUS_s_axi_U->WSTRB(s_axi_CRTL_BUS_WSTRB);
    Matrix_Multiply_CRTL_BUS_s_axi_U->ARVALID(s_axi_CRTL_BUS_ARVALID);
    Matrix_Multiply_CRTL_BUS_s_axi_U->ARREADY(s_axi_CRTL_BUS_ARREADY);
    Matrix_Multiply_CRTL_BUS_s_axi_U->ARADDR(s_axi_CRTL_BUS_ARADDR);
    Matrix_Multiply_CRTL_BUS_s_axi_U->RVALID(s_axi_CRTL_BUS_RVALID);
    Matrix_Multiply_CRTL_BUS_s_axi_U->RREADY(s_axi_CRTL_BUS_RREADY);
    Matrix_Multiply_CRTL_BUS_s_axi_U->RDATA(s_axi_CRTL_BUS_RDATA);
    Matrix_Multiply_CRTL_BUS_s_axi_U->RRESP(s_axi_CRTL_BUS_RRESP);
    Matrix_Multiply_CRTL_BUS_s_axi_U->BVALID(s_axi_CRTL_BUS_BVALID);
    Matrix_Multiply_CRTL_BUS_s_axi_U->BREADY(s_axi_CRTL_BUS_BREADY);
    Matrix_Multiply_CRTL_BUS_s_axi_U->BRESP(s_axi_CRTL_BUS_BRESP);
    Matrix_Multiply_CRTL_BUS_s_axi_U->ACLK(ap_clk);
    Matrix_Multiply_CRTL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    Matrix_Multiply_CRTL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    Matrix_Multiply_CRTL_BUS_s_axi_U->ap_start(ap_start);
    Matrix_Multiply_CRTL_BUS_s_axi_U->interrupt(interrupt);
    Matrix_Multiply_CRTL_BUS_s_axi_U->ap_ready(ap_ready);
    Matrix_Multiply_CRTL_BUS_s_axi_U->ap_done(ap_done);
    Matrix_Multiply_CRTL_BUS_s_axi_U->ap_idle(ap_idle);
    Matrix_Multiply_mbkb_U0 = new Matrix_Multiply_mbkb<1,6,32,32,32>("Matrix_Multiply_mbkb_U0");
    Matrix_Multiply_mbkb_U0->clk(ap_clk);
    Matrix_Multiply_mbkb_U0->reset(ap_rst_n_inv);
    Matrix_Multiply_mbkb_U0->din0(B1_load_phi_reg_1342);
    Matrix_Multiply_mbkb_U0->din1(A1_load_phi_reg_1337);
    Matrix_Multiply_mbkb_U0->ce(ap_var_for_const0);
    Matrix_Multiply_mbkb_U0->dout(grp_fu_860_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A1_1_1_1_fu_550_p3);
    sensitive << ( A_Dout_A );
    sensitive << ( tmp_7_reg_1195 );
    sensitive << ( A1_1_1_11_fu_74 );

    SC_METHOD(thread_A1_1_1_2_fu_557_p3);
    sensitive << ( A_Dout_A );
    sensitive << ( tmp_7_reg_1195 );
    sensitive << ( A1_1_1_10_fu_70 );

    SC_METHOD(thread_A1_1_1_3_fu_571_p3);
    sensitive << ( A_Dout_A );
    sensitive << ( tmp_7_reg_1195 );
    sensitive << ( A1_1_1_4_fu_62 );

    SC_METHOD(thread_A1_1_1_5_fu_578_p3);
    sensitive << ( tmp_3_reg_1150 );
    sensitive << ( A1_1_1_11_fu_74 );
    sensitive << ( A1_1_1_1_fu_550_p3 );

    SC_METHOD(thread_A1_1_1_6_fu_585_p3);
    sensitive << ( tmp_3_reg_1150 );
    sensitive << ( A1_1_1_10_fu_70 );
    sensitive << ( A1_1_1_2_fu_557_p3 );

    SC_METHOD(thread_A1_1_1_7_fu_592_p3);
    sensitive << ( tmp_3_reg_1150 );
    sensitive << ( A1_1_1_9_fu_66 );
    sensitive << ( A1_1_1_fu_564_p3 );

    SC_METHOD(thread_A1_1_1_8_fu_599_p3);
    sensitive << ( tmp_3_reg_1150 );
    sensitive << ( A1_1_1_4_fu_62 );
    sensitive << ( A1_1_1_3_fu_571_p3 );

    SC_METHOD(thread_A1_1_1_fu_564_p3);
    sensitive << ( A_Dout_A );
    sensitive << ( tmp_7_reg_1195 );
    sensitive << ( A1_1_1_9_fu_66 );

    SC_METHOD(thread_A1_load8_phi_fu_839_p3);
    sensitive << ( A1_1_1_4_fu_62 );
    sensitive << ( A1_1_1_9_fu_66 );
    sensitive << ( tmp_13_fu_827_p1 );

    SC_METHOD(thread_A1_load9_phi_fu_831_p3);
    sensitive << ( A1_1_1_10_fu_70 );
    sensitive << ( A1_1_1_11_fu_74 );
    sensitive << ( tmp_13_fu_827_p1 );

    SC_METHOD(thread_A1_load_phi_fu_847_p3);
    sensitive << ( tmp_8_reg_1291 );
    sensitive << ( A1_load9_phi_fu_831_p3 );
    sensitive << ( A1_load8_phi_fu_839_p3 );

    SC_METHOD(thread_A_Addr_A);
    sensitive << ( A_Addr_A_orig );

    SC_METHOD(thread_A_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( k_1_cast1_fu_535_p1 );
    sensitive << ( k_3_cast2_fu_676_p1 );

    SC_METHOD(thread_A_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_A_Din_A);

    SC_METHOD(thread_A_EN_A);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_A_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_A_WEN_A);

    SC_METHOD(thread_B1_1_1_1_fu_691_p3);
    sensitive << ( A_Dout_A );
    sensitive << ( tmp_9_reg_1270 );
    sensitive << ( B1_1_1_11_fu_90 );

    SC_METHOD(thread_B1_1_1_2_fu_698_p3);
    sensitive << ( A_Dout_A );
    sensitive << ( tmp_9_reg_1270 );
    sensitive << ( B1_1_1_10_fu_86 );

    SC_METHOD(thread_B1_1_1_3_fu_712_p3);
    sensitive << ( A_Dout_A );
    sensitive << ( tmp_9_reg_1270 );
    sensitive << ( B1_1_1_4_fu_78 );

    SC_METHOD(thread_B1_1_1_5_fu_719_p3);
    sensitive << ( tmp_6_reg_1221 );
    sensitive << ( B1_1_1_11_fu_90 );
    sensitive << ( B1_1_1_1_fu_691_p3 );

    SC_METHOD(thread_B1_1_1_6_fu_726_p3);
    sensitive << ( tmp_6_reg_1221 );
    sensitive << ( B1_1_1_10_fu_86 );
    sensitive << ( B1_1_1_2_fu_698_p3 );

    SC_METHOD(thread_B1_1_1_7_fu_733_p3);
    sensitive << ( tmp_6_reg_1221 );
    sensitive << ( B1_1_1_9_fu_82 );
    sensitive << ( B1_1_1_fu_705_p3 );

    SC_METHOD(thread_B1_1_1_8_fu_740_p3);
    sensitive << ( tmp_6_reg_1221 );
    sensitive << ( B1_1_1_4_fu_78 );
    sensitive << ( B1_1_1_3_fu_712_p3 );

    SC_METHOD(thread_B1_1_1_fu_705_p3);
    sensitive << ( A_Dout_A );
    sensitive << ( tmp_9_reg_1270 );
    sensitive << ( B1_1_1_9_fu_82 );

    SC_METHOD(thread_B1_load14_phi_fu_807_p3);
    sensitive << ( tmp_11_fu_795_p1 );
    sensitive << ( B1_1_1_4_fu_78 );
    sensitive << ( B1_1_1_9_fu_82 );

    SC_METHOD(thread_B1_load15_phi_fu_799_p3);
    sensitive << ( tmp_11_fu_795_p1 );
    sensitive << ( B1_1_1_10_fu_86 );
    sensitive << ( B1_1_1_11_fu_90 );

    SC_METHOD(thread_B1_load_phi_fu_854_p3);
    sensitive << ( B1_load15_phi_reg_1319 );
    sensitive << ( B1_load14_phi_reg_1324 );
    sensitive << ( tmp_13_fu_827_p1 );

    SC_METHOD(thread_C1_0_0_2_fu_474_p3);
    sensitive << ( tmp_2_reg_1097 );
    sensitive << ( C1_fu_46 );
    sensitive << ( C1_0_0_8_fu_445_p3 );

    SC_METHOD(thread_C1_0_0_8_fu_445_p3);
    sensitive << ( C1_fu_46 );
    sensitive << ( tmp_4_fu_417_p1 );

    SC_METHOD(thread_C1_0_1_2_fu_467_p3);
    sensitive << ( tmp_2_reg_1097 );
    sensitive << ( C1_0_1_fu_50 );
    sensitive << ( C1_0_1_8_fu_437_p3 );

    SC_METHOD(thread_C1_0_1_8_fu_437_p3);
    sensitive << ( C1_0_1_fu_50 );
    sensitive << ( tmp_4_fu_417_p1 );

    SC_METHOD(thread_C1_1_0_2_fu_460_p3);
    sensitive << ( tmp_2_reg_1097 );
    sensitive << ( C1_1_fu_54 );
    sensitive << ( C1_1_0_8_fu_429_p3 );

    SC_METHOD(thread_C1_1_0_8_fu_429_p3);
    sensitive << ( C1_1_fu_54 );
    sensitive << ( tmp_4_fu_417_p1 );

    SC_METHOD(thread_C1_1_0_fu_885_p2);
    sensitive << ( tmp_1_reg_1347 );
    sensitive << ( C1_load_1_phi_fu_878_p3 );

    SC_METHOD(thread_C1_1_1_12_fu_904_p3);
    sensitive << ( tmp_11_reg_1309 );
    sensitive << ( C1_1_1_9_fu_98 );
    sensitive << ( C1_1_0_fu_885_p2 );

    SC_METHOD(thread_C1_1_1_1_fu_890_p3);
    sensitive << ( tmp_11_reg_1309 );
    sensitive << ( C1_1_1_11_fu_106 );
    sensitive << ( C1_1_0_fu_885_p2 );

    SC_METHOD(thread_C1_1_1_2_11_fu_897_p3);
    sensitive << ( tmp_11_reg_1309 );
    sensitive << ( C1_1_1_10_fu_102 );
    sensitive << ( C1_1_0_fu_885_p2 );

    SC_METHOD(thread_C1_1_1_2_fu_453_p3);
    sensitive << ( tmp_2_reg_1097 );
    sensitive << ( C1_1_1_fu_58 );
    sensitive << ( C1_1_1_8_fu_421_p3 );

    SC_METHOD(thread_C1_1_1_3_fu_911_p3);
    sensitive << ( tmp_11_reg_1309 );
    sensitive << ( C1_1_1_4_fu_94 );
    sensitive << ( C1_1_0_fu_885_p2 );

    SC_METHOD(thread_C1_1_1_5_fu_918_p3);
    sensitive << ( tmp_8_reg_1291 );
    sensitive << ( C1_1_1_11_fu_106 );
    sensitive << ( C1_1_1_1_fu_890_p3 );

    SC_METHOD(thread_C1_1_1_6_fu_925_p3);
    sensitive << ( tmp_8_reg_1291 );
    sensitive << ( C1_1_1_10_fu_102 );
    sensitive << ( C1_1_1_2_11_fu_897_p3 );

    SC_METHOD(thread_C1_1_1_7_fu_932_p3);
    sensitive << ( tmp_8_reg_1291 );
    sensitive << ( C1_1_1_9_fu_98 );
    sensitive << ( C1_1_1_12_fu_904_p3 );

    SC_METHOD(thread_C1_1_1_8_13_fu_939_p3);
    sensitive << ( tmp_8_reg_1291 );
    sensitive << ( C1_1_1_4_fu_94 );
    sensitive << ( C1_1_1_3_fu_911_p3 );

    SC_METHOD(thread_C1_1_1_8_fu_421_p3);
    sensitive << ( C1_1_1_fu_58 );
    sensitive << ( tmp_4_fu_417_p1 );

    SC_METHOD(thread_C1_load20_phi_fu_1017_p3);
    sensitive << ( C1_1_1_4_fu_94 );
    sensitive << ( C1_1_1_9_fu_98 );
    sensitive << ( tmp_12_fu_1005_p1 );

    SC_METHOD(thread_C1_load21_phi_fu_1009_p3);
    sensitive << ( C1_1_1_10_fu_102 );
    sensitive << ( C1_1_1_11_fu_106 );
    sensitive << ( tmp_12_fu_1005_p1 );

    SC_METHOD(thread_C1_load_125_phi_fu_871_p3);
    sensitive << ( tmp_11_reg_1309 );
    sensitive << ( C1_1_1_4_fu_94 );
    sensitive << ( C1_1_1_9_fu_98 );

    SC_METHOD(thread_C1_load_126_phi_fu_864_p3);
    sensitive << ( tmp_11_reg_1309 );
    sensitive << ( C1_1_1_10_fu_102 );
    sensitive << ( C1_1_1_11_fu_106 );

    SC_METHOD(thread_C1_load_1_phi_fu_878_p3);
    sensitive << ( tmp_8_reg_1291 );
    sensitive << ( C1_load_126_phi_fu_864_p3 );
    sensitive << ( C1_load_125_phi_fu_871_p3 );

    SC_METHOD(thread_C_Addr_A);
    sensitive << ( k_5_cast5_fu_988_p1 );

    SC_METHOD(thread_C_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_C_Din_A);
    sensitive << ( tmp_10_reg_1365 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( C1_load21_phi_fu_1009_p3 );
    sensitive << ( C1_load20_phi_fu_1017_p3 );

    SC_METHOD(thread_C_EN_A);
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_C_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_C_WEN_A);
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( exitcond_fu_993_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( exitcond1_fu_966_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( exitcond1_fu_966_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_exitcond10_fu_389_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i1_reg_142 );

    SC_METHOD(thread_exitcond1_fu_966_p2);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( i4_reg_309 );

    SC_METHOD(thread_exitcond2_fu_815_p2);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( k9_reg_274 );

    SC_METHOD(thread_exitcond3_fu_783_p2);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( j8_reg_263 );

    SC_METHOD(thread_exitcond4_fu_767_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( i7_reg_252 );

    SC_METHOD(thread_exitcond5_fu_664_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( j6_reg_231 );

    SC_METHOD(thread_exitcond6_fu_626_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( i5_reg_208 );

    SC_METHOD(thread_exitcond7_fu_523_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( j4_reg_187 );

    SC_METHOD(thread_exitcond8_fu_501_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i3_reg_164 );

    SC_METHOD(thread_exitcond9_fu_405_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j2_reg_153 );

    SC_METHOD(thread_exitcond_fu_993_p2);
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( indvars_iv_reg_285 );
    sensitive << ( k_5_reg_320 );

    SC_METHOD(thread_i_1_fu_507_p2);
    sensitive << ( i3_reg_164 );

    SC_METHOD(thread_i_2_fu_632_p2);
    sensitive << ( i5_reg_208 );

    SC_METHOD(thread_i_3_fu_773_p2);
    sensitive << ( i7_reg_252 );

    SC_METHOD(thread_i_4_fu_972_p2);
    sensitive << ( i4_reg_309 );

    SC_METHOD(thread_i_fu_395_p2);
    sensitive << ( i1_reg_142 );

    SC_METHOD(thread_indvars_iv_next_fu_1039_p2);
    sensitive << ( indvars_iv_reg_285 );

    SC_METHOD(thread_j_1_fu_529_p2);
    sensitive << ( j4_reg_187 );

    SC_METHOD(thread_j_2_fu_670_p2);
    sensitive << ( j6_reg_231 );

    SC_METHOD(thread_j_3_fu_999_p2);
    sensitive << ( j3_reg_330 );

    SC_METHOD(thread_j_4_fu_789_p2);
    sensitive << ( j8_reg_263 );

    SC_METHOD(thread_j_fu_411_p2);
    sensitive << ( j2_reg_153 );

    SC_METHOD(thread_k_1_cast1_fu_535_p1);
    sensitive << ( k_1_reg_198 );

    SC_METHOD(thread_k_3_cast2_fu_676_p1);
    sensitive << ( k_3_reg_242 );

    SC_METHOD(thread_k_5_cast5_fu_988_p1);
    sensitive << ( k_5_reg_320 );

    SC_METHOD(thread_k_6_fu_638_p2);
    sensitive << ( k_2_reg_219 );

    SC_METHOD(thread_k_7_fu_685_p2);
    sensitive << ( k_3_reg_242 );

    SC_METHOD(thread_k_8_fu_978_p2);
    sensitive << ( k_4_reg_297 );

    SC_METHOD(thread_k_9_fu_821_p2);
    sensitive << ( k9_reg_274 );

    SC_METHOD(thread_tmp_10_fu_984_p1);
    sensitive << ( i4_reg_309 );

    SC_METHOD(thread_tmp_11_fu_795_p1);
    sensitive << ( j8_reg_263 );

    SC_METHOD(thread_tmp_12_fu_1005_p1);
    sensitive << ( j3_reg_330 );

    SC_METHOD(thread_tmp_13_fu_827_p1);
    sensitive << ( k9_reg_274 );

    SC_METHOD(thread_tmp_2_fu_401_p1);
    sensitive << ( i1_reg_142 );

    SC_METHOD(thread_tmp_3_fu_519_p1);
    sensitive << ( i3_reg_164 );

    SC_METHOD(thread_tmp_4_fu_417_p1);
    sensitive << ( j2_reg_153 );

    SC_METHOD(thread_tmp_5_fu_544_p2);
    sensitive << ( k_1_reg_198 );

    SC_METHOD(thread_tmp_6_fu_644_p1);
    sensitive << ( i5_reg_208 );

    SC_METHOD(thread_tmp_7_fu_540_p1);
    sensitive << ( j4_reg_187 );

    SC_METHOD(thread_tmp_8_fu_779_p1);
    sensitive << ( i7_reg_252 );

    SC_METHOD(thread_tmp_9_fu_681_p1);
    sensitive << ( j6_reg_231 );

    SC_METHOD(thread_tmp_fu_513_p2);
    sensitive << ( k_reg_175 );

    SC_METHOD(thread_tmp_s_fu_1033_p2);
    sensitive << ( k_5_reg_320 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond10_fu_389_p2 );
    sensitive << ( exitcond8_fu_501_p2 );
    sensitive << ( exitcond7_fu_523_p2 );
    sensitive << ( exitcond6_fu_626_p2 );
    sensitive << ( exitcond5_fu_664_p2 );
    sensitive << ( exitcond4_fu_767_p2 );
    sensitive << ( exitcond3_fu_783_p2 );
    sensitive << ( exitcond2_fu_815_p2 );
    sensitive << ( exitcond1_fu_966_p2 );
    sensitive << ( exitcond_fu_993_p2 );
    sensitive << ( exitcond9_fu_405_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Matrix_Multiply_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, A_Addr_A, "(port)A_Addr_A");
    sc_trace(mVcdFile, A_EN_A, "(port)A_EN_A");
    sc_trace(mVcdFile, A_WEN_A, "(port)A_WEN_A");
    sc_trace(mVcdFile, A_Din_A, "(port)A_Din_A");
    sc_trace(mVcdFile, A_Dout_A, "(port)A_Dout_A");
    sc_trace(mVcdFile, A_Clk_A, "(port)A_Clk_A");
    sc_trace(mVcdFile, A_Rst_A, "(port)A_Rst_A");
    sc_trace(mVcdFile, C_Addr_A, "(port)C_Addr_A");
    sc_trace(mVcdFile, C_EN_A, "(port)C_EN_A");
    sc_trace(mVcdFile, C_WEN_A, "(port)C_WEN_A");
    sc_trace(mVcdFile, C_Din_A, "(port)C_Din_A");
    sc_trace(mVcdFile, C_Dout_A, "(port)C_Dout_A");
    sc_trace(mVcdFile, C_Clk_A, "(port)C_Clk_A");
    sc_trace(mVcdFile, C_Rst_A, "(port)C_Rst_A");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWVALID, "(port)s_axi_CRTL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWREADY, "(port)s_axi_CRTL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWADDR, "(port)s_axi_CRTL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WVALID, "(port)s_axi_CRTL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WREADY, "(port)s_axi_CRTL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WDATA, "(port)s_axi_CRTL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WSTRB, "(port)s_axi_CRTL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARVALID, "(port)s_axi_CRTL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARREADY, "(port)s_axi_CRTL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARADDR, "(port)s_axi_CRTL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RVALID, "(port)s_axi_CRTL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RREADY, "(port)s_axi_CRTL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RDATA, "(port)s_axi_CRTL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RRESP, "(port)s_axi_CRTL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BVALID, "(port)s_axi_CRTL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BREADY, "(port)s_axi_CRTL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BRESP, "(port)s_axi_CRTL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, C1_load_reg_1069, "C1_load_reg_1069");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, C1_0_1_load_reg_1074, "C1_0_1_load_reg_1074");
    sc_trace(mVcdFile, C1_1_load_reg_1079, "C1_1_load_reg_1079");
    sc_trace(mVcdFile, C1_1_1_load_reg_1084, "C1_1_1_load_reg_1084");
    sc_trace(mVcdFile, i_fu_395_p2, "i_fu_395_p2");
    sc_trace(mVcdFile, i_reg_1092, "i_reg_1092");
    sc_trace(mVcdFile, tmp_2_fu_401_p1, "tmp_2_fu_401_p1");
    sc_trace(mVcdFile, tmp_2_reg_1097, "tmp_2_reg_1097");
    sc_trace(mVcdFile, exitcond10_fu_389_p2, "exitcond10_fu_389_p2");
    sc_trace(mVcdFile, j_fu_411_p2, "j_fu_411_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_1_fu_507_p2, "i_1_fu_507_p2");
    sc_trace(mVcdFile, i_1_reg_1140, "i_1_reg_1140");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_fu_513_p2, "tmp_fu_513_p2");
    sc_trace(mVcdFile, tmp_reg_1145, "tmp_reg_1145");
    sc_trace(mVcdFile, exitcond8_fu_501_p2, "exitcond8_fu_501_p2");
    sc_trace(mVcdFile, tmp_3_fu_519_p1, "tmp_3_fu_519_p1");
    sc_trace(mVcdFile, tmp_3_reg_1150, "tmp_3_reg_1150");
    sc_trace(mVcdFile, j_1_fu_529_p2, "j_1_fu_529_p2");
    sc_trace(mVcdFile, j_1_reg_1185, "j_1_reg_1185");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, exitcond7_fu_523_p2, "exitcond7_fu_523_p2");
    sc_trace(mVcdFile, tmp_7_fu_540_p1, "tmp_7_fu_540_p1");
    sc_trace(mVcdFile, tmp_7_reg_1195, "tmp_7_reg_1195");
    sc_trace(mVcdFile, tmp_5_fu_544_p2, "tmp_5_fu_544_p2");
    sc_trace(mVcdFile, tmp_5_reg_1203, "tmp_5_reg_1203");
    sc_trace(mVcdFile, i_2_fu_632_p2, "i_2_fu_632_p2");
    sc_trace(mVcdFile, i_2_reg_1211, "i_2_reg_1211");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, k_6_fu_638_p2, "k_6_fu_638_p2");
    sc_trace(mVcdFile, k_6_reg_1216, "k_6_reg_1216");
    sc_trace(mVcdFile, exitcond6_fu_626_p2, "exitcond6_fu_626_p2");
    sc_trace(mVcdFile, tmp_6_fu_644_p1, "tmp_6_fu_644_p1");
    sc_trace(mVcdFile, tmp_6_reg_1221, "tmp_6_reg_1221");
    sc_trace(mVcdFile, j_2_fu_670_p2, "j_2_fu_670_p2");
    sc_trace(mVcdFile, j_2_reg_1260, "j_2_reg_1260");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, exitcond5_fu_664_p2, "exitcond5_fu_664_p2");
    sc_trace(mVcdFile, tmp_9_fu_681_p1, "tmp_9_fu_681_p1");
    sc_trace(mVcdFile, tmp_9_reg_1270, "tmp_9_reg_1270");
    sc_trace(mVcdFile, k_7_fu_685_p2, "k_7_fu_685_p2");
    sc_trace(mVcdFile, k_7_reg_1278, "k_7_reg_1278");
    sc_trace(mVcdFile, i_3_fu_773_p2, "i_3_fu_773_p2");
    sc_trace(mVcdFile, i_3_reg_1286, "i_3_reg_1286");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_8_fu_779_p1, "tmp_8_fu_779_p1");
    sc_trace(mVcdFile, tmp_8_reg_1291, "tmp_8_reg_1291");
    sc_trace(mVcdFile, exitcond4_fu_767_p2, "exitcond4_fu_767_p2");
    sc_trace(mVcdFile, j_4_fu_789_p2, "j_4_fu_789_p2");
    sc_trace(mVcdFile, j_4_reg_1304, "j_4_reg_1304");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, tmp_11_fu_795_p1, "tmp_11_fu_795_p1");
    sc_trace(mVcdFile, tmp_11_reg_1309, "tmp_11_reg_1309");
    sc_trace(mVcdFile, exitcond3_fu_783_p2, "exitcond3_fu_783_p2");
    sc_trace(mVcdFile, B1_load15_phi_fu_799_p3, "B1_load15_phi_fu_799_p3");
    sc_trace(mVcdFile, B1_load15_phi_reg_1319, "B1_load15_phi_reg_1319");
    sc_trace(mVcdFile, B1_load14_phi_fu_807_p3, "B1_load14_phi_fu_807_p3");
    sc_trace(mVcdFile, B1_load14_phi_reg_1324, "B1_load14_phi_reg_1324");
    sc_trace(mVcdFile, k_9_fu_821_p2, "k_9_fu_821_p2");
    sc_trace(mVcdFile, k_9_reg_1332, "k_9_reg_1332");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, A1_load_phi_fu_847_p3, "A1_load_phi_fu_847_p3");
    sc_trace(mVcdFile, A1_load_phi_reg_1337, "A1_load_phi_reg_1337");
    sc_trace(mVcdFile, exitcond2_fu_815_p2, "exitcond2_fu_815_p2");
    sc_trace(mVcdFile, B1_load_phi_fu_854_p3, "B1_load_phi_fu_854_p3");
    sc_trace(mVcdFile, B1_load_phi_reg_1342, "B1_load_phi_reg_1342");
    sc_trace(mVcdFile, grp_fu_860_p2, "grp_fu_860_p2");
    sc_trace(mVcdFile, tmp_1_reg_1347, "tmp_1_reg_1347");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, i_4_fu_972_p2, "i_4_fu_972_p2");
    sc_trace(mVcdFile, i_4_reg_1355, "i_4_reg_1355");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, k_8_fu_978_p2, "k_8_fu_978_p2");
    sc_trace(mVcdFile, k_8_reg_1360, "k_8_reg_1360");
    sc_trace(mVcdFile, exitcond1_fu_966_p2, "exitcond1_fu_966_p2");
    sc_trace(mVcdFile, tmp_10_fu_984_p1, "tmp_10_fu_984_p1");
    sc_trace(mVcdFile, tmp_10_reg_1365, "tmp_10_reg_1365");
    sc_trace(mVcdFile, j_3_fu_999_p2, "j_3_fu_999_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, tmp_s_fu_1033_p2, "tmp_s_fu_1033_p2");
    sc_trace(mVcdFile, exitcond_fu_993_p2, "exitcond_fu_993_p2");
    sc_trace(mVcdFile, indvars_iv_next_fu_1039_p2, "indvars_iv_next_fu_1039_p2");
    sc_trace(mVcdFile, i1_reg_142, "i1_reg_142");
    sc_trace(mVcdFile, exitcond9_fu_405_p2, "exitcond9_fu_405_p2");
    sc_trace(mVcdFile, j2_reg_153, "j2_reg_153");
    sc_trace(mVcdFile, i3_reg_164, "i3_reg_164");
    sc_trace(mVcdFile, k_reg_175, "k_reg_175");
    sc_trace(mVcdFile, j4_reg_187, "j4_reg_187");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, k_1_reg_198, "k_1_reg_198");
    sc_trace(mVcdFile, i5_reg_208, "i5_reg_208");
    sc_trace(mVcdFile, k_2_reg_219, "k_2_reg_219");
    sc_trace(mVcdFile, j6_reg_231, "j6_reg_231");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, k_3_reg_242, "k_3_reg_242");
    sc_trace(mVcdFile, i7_reg_252, "i7_reg_252");
    sc_trace(mVcdFile, j8_reg_263, "j8_reg_263");
    sc_trace(mVcdFile, k9_reg_274, "k9_reg_274");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, indvars_iv_reg_285, "indvars_iv_reg_285");
    sc_trace(mVcdFile, k_4_reg_297, "k_4_reg_297");
    sc_trace(mVcdFile, i4_reg_309, "i4_reg_309");
    sc_trace(mVcdFile, k_5_reg_320, "k_5_reg_320");
    sc_trace(mVcdFile, j3_reg_330, "j3_reg_330");
    sc_trace(mVcdFile, k_1_cast1_fu_535_p1, "k_1_cast1_fu_535_p1");
    sc_trace(mVcdFile, k_3_cast2_fu_676_p1, "k_3_cast2_fu_676_p1");
    sc_trace(mVcdFile, k_5_cast5_fu_988_p1, "k_5_cast5_fu_988_p1");
    sc_trace(mVcdFile, C1_fu_46, "C1_fu_46");
    sc_trace(mVcdFile, C1_0_0_2_fu_474_p3, "C1_0_0_2_fu_474_p3");
    sc_trace(mVcdFile, C1_0_1_fu_50, "C1_0_1_fu_50");
    sc_trace(mVcdFile, C1_0_1_2_fu_467_p3, "C1_0_1_2_fu_467_p3");
    sc_trace(mVcdFile, C1_1_fu_54, "C1_1_fu_54");
    sc_trace(mVcdFile, C1_1_0_2_fu_460_p3, "C1_1_0_2_fu_460_p3");
    sc_trace(mVcdFile, C1_1_1_fu_58, "C1_1_1_fu_58");
    sc_trace(mVcdFile, C1_1_1_2_fu_453_p3, "C1_1_1_2_fu_453_p3");
    sc_trace(mVcdFile, A1_1_1_4_fu_62, "A1_1_1_4_fu_62");
    sc_trace(mVcdFile, A1_1_1_8_fu_599_p3, "A1_1_1_8_fu_599_p3");
    sc_trace(mVcdFile, A1_1_1_9_fu_66, "A1_1_1_9_fu_66");
    sc_trace(mVcdFile, A1_1_1_7_fu_592_p3, "A1_1_1_7_fu_592_p3");
    sc_trace(mVcdFile, A1_1_1_10_fu_70, "A1_1_1_10_fu_70");
    sc_trace(mVcdFile, A1_1_1_6_fu_585_p3, "A1_1_1_6_fu_585_p3");
    sc_trace(mVcdFile, A1_1_1_11_fu_74, "A1_1_1_11_fu_74");
    sc_trace(mVcdFile, A1_1_1_5_fu_578_p3, "A1_1_1_5_fu_578_p3");
    sc_trace(mVcdFile, B1_1_1_4_fu_78, "B1_1_1_4_fu_78");
    sc_trace(mVcdFile, B1_1_1_8_fu_740_p3, "B1_1_1_8_fu_740_p3");
    sc_trace(mVcdFile, B1_1_1_9_fu_82, "B1_1_1_9_fu_82");
    sc_trace(mVcdFile, B1_1_1_7_fu_733_p3, "B1_1_1_7_fu_733_p3");
    sc_trace(mVcdFile, B1_1_1_10_fu_86, "B1_1_1_10_fu_86");
    sc_trace(mVcdFile, B1_1_1_6_fu_726_p3, "B1_1_1_6_fu_726_p3");
    sc_trace(mVcdFile, B1_1_1_11_fu_90, "B1_1_1_11_fu_90");
    sc_trace(mVcdFile, B1_1_1_5_fu_719_p3, "B1_1_1_5_fu_719_p3");
    sc_trace(mVcdFile, C1_1_1_4_fu_94, "C1_1_1_4_fu_94");
    sc_trace(mVcdFile, C1_1_1_8_13_fu_939_p3, "C1_1_1_8_13_fu_939_p3");
    sc_trace(mVcdFile, C1_1_1_9_fu_98, "C1_1_1_9_fu_98");
    sc_trace(mVcdFile, C1_1_1_7_fu_932_p3, "C1_1_1_7_fu_932_p3");
    sc_trace(mVcdFile, C1_1_1_10_fu_102, "C1_1_1_10_fu_102");
    sc_trace(mVcdFile, C1_1_1_6_fu_925_p3, "C1_1_1_6_fu_925_p3");
    sc_trace(mVcdFile, C1_1_1_11_fu_106, "C1_1_1_11_fu_106");
    sc_trace(mVcdFile, C1_1_1_5_fu_918_p3, "C1_1_1_5_fu_918_p3");
    sc_trace(mVcdFile, A_Addr_A_orig, "A_Addr_A_orig");
    sc_trace(mVcdFile, tmp_4_fu_417_p1, "tmp_4_fu_417_p1");
    sc_trace(mVcdFile, C1_1_1_8_fu_421_p3, "C1_1_1_8_fu_421_p3");
    sc_trace(mVcdFile, C1_1_0_8_fu_429_p3, "C1_1_0_8_fu_429_p3");
    sc_trace(mVcdFile, C1_0_1_8_fu_437_p3, "C1_0_1_8_fu_437_p3");
    sc_trace(mVcdFile, C1_0_0_8_fu_445_p3, "C1_0_0_8_fu_445_p3");
    sc_trace(mVcdFile, A1_1_1_1_fu_550_p3, "A1_1_1_1_fu_550_p3");
    sc_trace(mVcdFile, A1_1_1_2_fu_557_p3, "A1_1_1_2_fu_557_p3");
    sc_trace(mVcdFile, A1_1_1_fu_564_p3, "A1_1_1_fu_564_p3");
    sc_trace(mVcdFile, A1_1_1_3_fu_571_p3, "A1_1_1_3_fu_571_p3");
    sc_trace(mVcdFile, B1_1_1_1_fu_691_p3, "B1_1_1_1_fu_691_p3");
    sc_trace(mVcdFile, B1_1_1_2_fu_698_p3, "B1_1_1_2_fu_698_p3");
    sc_trace(mVcdFile, B1_1_1_fu_705_p3, "B1_1_1_fu_705_p3");
    sc_trace(mVcdFile, B1_1_1_3_fu_712_p3, "B1_1_1_3_fu_712_p3");
    sc_trace(mVcdFile, tmp_13_fu_827_p1, "tmp_13_fu_827_p1");
    sc_trace(mVcdFile, A1_load9_phi_fu_831_p3, "A1_load9_phi_fu_831_p3");
    sc_trace(mVcdFile, A1_load8_phi_fu_839_p3, "A1_load8_phi_fu_839_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, C1_load_126_phi_fu_864_p3, "C1_load_126_phi_fu_864_p3");
    sc_trace(mVcdFile, C1_load_125_phi_fu_871_p3, "C1_load_125_phi_fu_871_p3");
    sc_trace(mVcdFile, C1_load_1_phi_fu_878_p3, "C1_load_1_phi_fu_878_p3");
    sc_trace(mVcdFile, C1_1_0_fu_885_p2, "C1_1_0_fu_885_p2");
    sc_trace(mVcdFile, C1_1_1_1_fu_890_p3, "C1_1_1_1_fu_890_p3");
    sc_trace(mVcdFile, C1_1_1_2_11_fu_897_p3, "C1_1_1_2_11_fu_897_p3");
    sc_trace(mVcdFile, C1_1_1_12_fu_904_p3, "C1_1_1_12_fu_904_p3");
    sc_trace(mVcdFile, C1_1_1_3_fu_911_p3, "C1_1_1_3_fu_911_p3");
    sc_trace(mVcdFile, tmp_12_fu_1005_p1, "tmp_12_fu_1005_p1");
    sc_trace(mVcdFile, C1_load21_phi_fu_1009_p3, "C1_load21_phi_fu_1009_p3");
    sc_trace(mVcdFile, C1_load20_phi_fu_1017_p3, "C1_load20_phi_fu_1017_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("Matrix_Multiply.hdltvin.dat");
    mHdltvoutHandle.open("Matrix_Multiply.hdltvout.dat");
}

Matrix_Multiply::~Matrix_Multiply() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Matrix_Multiply_CRTL_BUS_s_axi_U;
    delete Matrix_Multiply_mbkb_U0;
}

void Matrix_Multiply::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Matrix_Multiply::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()))) {
        C1_1_1_10_fu_102 = C1_1_1_6_fu_925_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_626_p2.read()))) {
        C1_1_1_10_fu_102 = C1_1_load_reg_1079.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()))) {
        C1_1_1_11_fu_106 = C1_1_1_5_fu_918_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_626_p2.read()))) {
        C1_1_1_11_fu_106 = C1_1_1_load_reg_1084.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()))) {
        C1_1_1_4_fu_94 = C1_1_1_8_13_fu_939_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_626_p2.read()))) {
        C1_1_1_4_fu_94 = C1_load_reg_1069.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()))) {
        C1_1_1_9_fu_98 = C1_1_1_7_fu_932_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_626_p2.read()))) {
        C1_1_1_9_fu_98 = C1_0_1_load_reg_1074.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond9_fu_405_p2.read()))) {
        i1_reg_142 = i_reg_1092.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i1_reg_142 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_fu_523_p2.read()))) {
        i3_reg_164 = i_1_reg_1140.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                !esl_seteq<1,1,1>(exitcond10_fu_389_p2.read(), ap_const_lv1_0))) {
        i3_reg_164 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_767_p2.read()))) {
        i4_reg_309 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_993_p2.read()))) {
        i4_reg_309 = i_4_reg_1355.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond5_fu_664_p2.read()))) {
        i5_reg_208 = i_2_reg_1211.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond8_fu_501_p2.read()))) {
        i5_reg_208 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_783_p2.read()))) {
        i7_reg_252 = i_3_reg_1286.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_626_p2.read()))) {
        i7_reg_252 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_767_p2.read()))) {
        indvars_iv_reg_285 = ap_const_lv3_2;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_993_p2.read()))) {
        indvars_iv_reg_285 = indvars_iv_next_fu_1039_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond10_fu_389_p2.read(), ap_const_lv1_0))) {
        j2_reg_153 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond9_fu_405_p2.read()))) {
        j2_reg_153 = j_fu_411_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_993_p2.read()))) {
        j3_reg_330 = j_3_fu_999_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_966_p2.read()))) {
        j3_reg_330 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        j4_reg_187 = j_1_reg_1185.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond8_fu_501_p2.read()))) {
        j4_reg_187 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
        j6_reg_231 = j_2_reg_1260.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_626_p2.read()))) {
        j6_reg_231 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_815_p2.read()))) {
        j8_reg_263 = j_4_reg_1304.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_767_p2.read()))) {
        j8_reg_263 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()))) {
        k9_reg_274 = k_9_reg_1332.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_783_p2.read()))) {
        k9_reg_274 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        k_1_reg_198 = tmp_5_reg_1203.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond8_fu_501_p2.read()))) {
        k_1_reg_198 = k_reg_175.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond5_fu_664_p2.read()))) {
        k_2_reg_219 = k_6_reg_1216.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond8_fu_501_p2.read()))) {
        k_2_reg_219 = ap_const_lv4_4;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
        k_3_reg_242 = k_7_reg_1278.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_626_p2.read()))) {
        k_3_reg_242 = k_2_reg_219.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_767_p2.read()))) {
        k_4_reg_297 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_993_p2.read()))) {
        k_4_reg_297 = k_8_reg_1360.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_993_p2.read()))) {
        k_5_reg_320 = tmp_s_fu_1033_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_966_p2.read()))) {
        k_5_reg_320 = k_4_reg_297.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_fu_523_p2.read()))) {
        k_reg_175 = tmp_reg_1145.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                !esl_seteq<1,1,1>(exitcond10_fu_389_p2.read(), ap_const_lv1_0))) {
        k_reg_175 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        A1_1_1_10_fu_70 = A1_1_1_6_fu_585_p3.read();
        A1_1_1_11_fu_74 = A1_1_1_5_fu_578_p3.read();
        A1_1_1_4_fu_62 = A1_1_1_8_fu_599_p3.read();
        A1_1_1_9_fu_66 = A1_1_1_7_fu_592_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_815_p2.read()))) {
        A1_load_phi_reg_1337 = A1_load_phi_fu_847_p3.read();
        B1_load_phi_reg_1342 = B1_load_phi_fu_854_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
        B1_1_1_10_fu_86 = B1_1_1_6_fu_726_p3.read();
        B1_1_1_11_fu_90 = B1_1_1_5_fu_719_p3.read();
        B1_1_1_4_fu_78 = B1_1_1_8_fu_740_p3.read();
        B1_1_1_9_fu_82 = B1_1_1_7_fu_733_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_783_p2.read()))) {
        B1_load14_phi_reg_1324 = B1_load14_phi_fu_807_p3.read();
        B1_load15_phi_reg_1319 = B1_load15_phi_fu_799_p3.read();
        tmp_11_reg_1309 = tmp_11_fu_795_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond9_fu_405_p2.read()))) {
        C1_0_1_fu_50 = C1_0_1_2_fu_467_p3.read();
        C1_1_1_fu_58 = C1_1_1_2_fu_453_p3.read();
        C1_1_fu_54 = C1_1_0_2_fu_460_p3.read();
        C1_fu_46 = C1_0_0_2_fu_474_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        C1_0_1_load_reg_1074 = C1_0_1_fu_50.read();
        C1_1_1_load_reg_1084 = C1_1_1_fu_58.read();
        C1_1_load_reg_1079 = C1_1_fu_54.read();
        C1_load_reg_1069 = C1_fu_46.read();
        i_reg_1092 = i_fu_395_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        i_1_reg_1140 = i_1_fu_507_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()))) {
        i_2_reg_1211 = i_2_fu_632_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()))) {
        i_3_reg_1286 = i_3_fu_773_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
        i_4_reg_1355 = i_4_fu_972_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        j_1_reg_1185 = j_1_fu_529_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        j_2_reg_1260 = j_2_fu_670_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read()))) {
        j_4_reg_1304 = j_4_fu_789_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_626_p2.read()))) {
        k_6_reg_1216 = k_6_fu_638_p2.read();
        tmp_6_reg_1221 = tmp_6_fu_644_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond5_fu_664_p2.read()))) {
        k_7_reg_1278 = k_7_fu_685_p2.read();
        tmp_9_reg_1270 = tmp_9_fu_681_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_966_p2.read()))) {
        k_8_reg_1360 = k_8_fu_978_p2.read();
        tmp_10_reg_1365 = tmp_10_fu_984_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        k_9_reg_1332 = k_9_fu_821_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read()))) {
        tmp_1_reg_1347 = grp_fu_860_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond10_fu_389_p2.read(), ap_const_lv1_0))) {
        tmp_2_reg_1097 = tmp_2_fu_401_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond8_fu_501_p2.read()))) {
        tmp_3_reg_1150 = tmp_3_fu_519_p1.read();
        tmp_reg_1145 = tmp_fu_513_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_fu_523_p2.read()))) {
        tmp_5_reg_1203 = tmp_5_fu_544_p2.read();
        tmp_7_reg_1195 = tmp_7_fu_540_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_767_p2.read()))) {
        tmp_8_reg_1291 = tmp_8_fu_779_p1.read();
    }
}

void Matrix_Multiply::thread_A1_1_1_1_fu_550_p3() {
    A1_1_1_1_fu_550_p3 = (!tmp_7_reg_1195.read()[0].is_01())? sc_lv<32>(): ((tmp_7_reg_1195.read()[0].to_bool())? A_Dout_A.read(): A1_1_1_11_fu_74.read());
}

void Matrix_Multiply::thread_A1_1_1_2_fu_557_p3() {
    A1_1_1_2_fu_557_p3 = (!tmp_7_reg_1195.read()[0].is_01())? sc_lv<32>(): ((tmp_7_reg_1195.read()[0].to_bool())? A1_1_1_10_fu_70.read(): A_Dout_A.read());
}

void Matrix_Multiply::thread_A1_1_1_3_fu_571_p3() {
    A1_1_1_3_fu_571_p3 = (!tmp_7_reg_1195.read()[0].is_01())? sc_lv<32>(): ((tmp_7_reg_1195.read()[0].to_bool())? A1_1_1_4_fu_62.read(): A_Dout_A.read());
}

void Matrix_Multiply::thread_A1_1_1_5_fu_578_p3() {
    A1_1_1_5_fu_578_p3 = (!tmp_3_reg_1150.read()[0].is_01())? sc_lv<32>(): ((tmp_3_reg_1150.read()[0].to_bool())? A1_1_1_1_fu_550_p3.read(): A1_1_1_11_fu_74.read());
}

void Matrix_Multiply::thread_A1_1_1_6_fu_585_p3() {
    A1_1_1_6_fu_585_p3 = (!tmp_3_reg_1150.read()[0].is_01())? sc_lv<32>(): ((tmp_3_reg_1150.read()[0].to_bool())? A1_1_1_2_fu_557_p3.read(): A1_1_1_10_fu_70.read());
}

void Matrix_Multiply::thread_A1_1_1_7_fu_592_p3() {
    A1_1_1_7_fu_592_p3 = (!tmp_3_reg_1150.read()[0].is_01())? sc_lv<32>(): ((tmp_3_reg_1150.read()[0].to_bool())? A1_1_1_9_fu_66.read(): A1_1_1_fu_564_p3.read());
}

void Matrix_Multiply::thread_A1_1_1_8_fu_599_p3() {
    A1_1_1_8_fu_599_p3 = (!tmp_3_reg_1150.read()[0].is_01())? sc_lv<32>(): ((tmp_3_reg_1150.read()[0].to_bool())? A1_1_1_4_fu_62.read(): A1_1_1_3_fu_571_p3.read());
}

void Matrix_Multiply::thread_A1_1_1_fu_564_p3() {
    A1_1_1_fu_564_p3 = (!tmp_7_reg_1195.read()[0].is_01())? sc_lv<32>(): ((tmp_7_reg_1195.read()[0].to_bool())? A_Dout_A.read(): A1_1_1_9_fu_66.read());
}

void Matrix_Multiply::thread_A1_load8_phi_fu_839_p3() {
    A1_load8_phi_fu_839_p3 = (!tmp_13_fu_827_p1.read()[0].is_01())? sc_lv<32>(): ((tmp_13_fu_827_p1.read()[0].to_bool())? A1_1_1_9_fu_66.read(): A1_1_1_4_fu_62.read());
}

void Matrix_Multiply::thread_A1_load9_phi_fu_831_p3() {
    A1_load9_phi_fu_831_p3 = (!tmp_13_fu_827_p1.read()[0].is_01())? sc_lv<32>(): ((tmp_13_fu_827_p1.read()[0].to_bool())? A1_1_1_11_fu_74.read(): A1_1_1_10_fu_70.read());
}

void Matrix_Multiply::thread_A1_load_phi_fu_847_p3() {
    A1_load_phi_fu_847_p3 = (!tmp_8_reg_1291.read()[0].is_01())? sc_lv<32>(): ((tmp_8_reg_1291.read()[0].to_bool())? A1_load9_phi_fu_831_p3.read(): A1_load8_phi_fu_839_p3.read());
}

void Matrix_Multiply::thread_A_Addr_A() {
    A_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): A_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void Matrix_Multiply::thread_A_Addr_A_orig() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        A_Addr_A_orig = k_3_cast2_fu_676_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        A_Addr_A_orig = k_1_cast1_fu_535_p1.read();
    } else {
        A_Addr_A_orig = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void Matrix_Multiply::thread_A_Clk_A() {
    A_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void Matrix_Multiply::thread_A_Din_A() {
    A_Din_A = ap_const_lv32_0;
}

void Matrix_Multiply::thread_A_EN_A() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())))) {
        A_EN_A = ap_const_logic_1;
    } else {
        A_EN_A = ap_const_logic_0;
    }
}

void Matrix_Multiply::thread_A_Rst_A() {
    A_Rst_A = ap_rst_n_inv.read();
}

void Matrix_Multiply::thread_A_WEN_A() {
    A_WEN_A = ap_const_lv4_0;
}

void Matrix_Multiply::thread_B1_1_1_1_fu_691_p3() {
    B1_1_1_1_fu_691_p3 = (!tmp_9_reg_1270.read()[0].is_01())? sc_lv<32>(): ((tmp_9_reg_1270.read()[0].to_bool())? A_Dout_A.read(): B1_1_1_11_fu_90.read());
}

void Matrix_Multiply::thread_B1_1_1_2_fu_698_p3() {
    B1_1_1_2_fu_698_p3 = (!tmp_9_reg_1270.read()[0].is_01())? sc_lv<32>(): ((tmp_9_reg_1270.read()[0].to_bool())? B1_1_1_10_fu_86.read(): A_Dout_A.read());
}

void Matrix_Multiply::thread_B1_1_1_3_fu_712_p3() {
    B1_1_1_3_fu_712_p3 = (!tmp_9_reg_1270.read()[0].is_01())? sc_lv<32>(): ((tmp_9_reg_1270.read()[0].to_bool())? B1_1_1_4_fu_78.read(): A_Dout_A.read());
}

void Matrix_Multiply::thread_B1_1_1_5_fu_719_p3() {
    B1_1_1_5_fu_719_p3 = (!tmp_6_reg_1221.read()[0].is_01())? sc_lv<32>(): ((tmp_6_reg_1221.read()[0].to_bool())? B1_1_1_1_fu_691_p3.read(): B1_1_1_11_fu_90.read());
}

void Matrix_Multiply::thread_B1_1_1_6_fu_726_p3() {
    B1_1_1_6_fu_726_p3 = (!tmp_6_reg_1221.read()[0].is_01())? sc_lv<32>(): ((tmp_6_reg_1221.read()[0].to_bool())? B1_1_1_2_fu_698_p3.read(): B1_1_1_10_fu_86.read());
}

void Matrix_Multiply::thread_B1_1_1_7_fu_733_p3() {
    B1_1_1_7_fu_733_p3 = (!tmp_6_reg_1221.read()[0].is_01())? sc_lv<32>(): ((tmp_6_reg_1221.read()[0].to_bool())? B1_1_1_9_fu_82.read(): B1_1_1_fu_705_p3.read());
}

void Matrix_Multiply::thread_B1_1_1_8_fu_740_p3() {
    B1_1_1_8_fu_740_p3 = (!tmp_6_reg_1221.read()[0].is_01())? sc_lv<32>(): ((tmp_6_reg_1221.read()[0].to_bool())? B1_1_1_4_fu_78.read(): B1_1_1_3_fu_712_p3.read());
}

void Matrix_Multiply::thread_B1_1_1_fu_705_p3() {
    B1_1_1_fu_705_p3 = (!tmp_9_reg_1270.read()[0].is_01())? sc_lv<32>(): ((tmp_9_reg_1270.read()[0].to_bool())? A_Dout_A.read(): B1_1_1_9_fu_82.read());
}

void Matrix_Multiply::thread_B1_load14_phi_fu_807_p3() {
    B1_load14_phi_fu_807_p3 = (!tmp_11_fu_795_p1.read()[0].is_01())? sc_lv<32>(): ((tmp_11_fu_795_p1.read()[0].to_bool())? B1_1_1_9_fu_82.read(): B1_1_1_4_fu_78.read());
}

void Matrix_Multiply::thread_B1_load15_phi_fu_799_p3() {
    B1_load15_phi_fu_799_p3 = (!tmp_11_fu_795_p1.read()[0].is_01())? sc_lv<32>(): ((tmp_11_fu_795_p1.read()[0].to_bool())? B1_1_1_11_fu_90.read(): B1_1_1_10_fu_86.read());
}

void Matrix_Multiply::thread_B1_load_phi_fu_854_p3() {
    B1_load_phi_fu_854_p3 = (!tmp_13_fu_827_p1.read()[0].is_01())? sc_lv<32>(): ((tmp_13_fu_827_p1.read()[0].to_bool())? B1_load15_phi_reg_1319.read(): B1_load14_phi_reg_1324.read());
}

void Matrix_Multiply::thread_C1_0_0_2_fu_474_p3() {
    C1_0_0_2_fu_474_p3 = (!tmp_2_reg_1097.read()[0].is_01())? sc_lv<32>(): ((tmp_2_reg_1097.read()[0].to_bool())? C1_fu_46.read(): C1_0_0_8_fu_445_p3.read());
}

void Matrix_Multiply::thread_C1_0_0_8_fu_445_p3() {
    C1_0_0_8_fu_445_p3 = (!tmp_4_fu_417_p1.read()[0].is_01())? sc_lv<32>(): ((tmp_4_fu_417_p1.read()[0].to_bool())? C1_fu_46.read(): ap_const_lv32_0);
}

void Matrix_Multiply::thread_C1_0_1_2_fu_467_p3() {
    C1_0_1_2_fu_467_p3 = (!tmp_2_reg_1097.read()[0].is_01())? sc_lv<32>(): ((tmp_2_reg_1097.read()[0].to_bool())? C1_0_1_fu_50.read(): C1_0_1_8_fu_437_p3.read());
}

void Matrix_Multiply::thread_C1_0_1_8_fu_437_p3() {
    C1_0_1_8_fu_437_p3 = (!tmp_4_fu_417_p1.read()[0].is_01())? sc_lv<32>(): ((tmp_4_fu_417_p1.read()[0].to_bool())? ap_const_lv32_0: C1_0_1_fu_50.read());
}

void Matrix_Multiply::thread_C1_1_0_2_fu_460_p3() {
    C1_1_0_2_fu_460_p3 = (!tmp_2_reg_1097.read()[0].is_01())? sc_lv<32>(): ((tmp_2_reg_1097.read()[0].to_bool())? C1_1_0_8_fu_429_p3.read(): C1_1_fu_54.read());
}

void Matrix_Multiply::thread_C1_1_0_8_fu_429_p3() {
    C1_1_0_8_fu_429_p3 = (!tmp_4_fu_417_p1.read()[0].is_01())? sc_lv<32>(): ((tmp_4_fu_417_p1.read()[0].to_bool())? C1_1_fu_54.read(): ap_const_lv32_0);
}

void Matrix_Multiply::thread_C1_1_0_fu_885_p2() {
    C1_1_0_fu_885_p2 = (!tmp_1_reg_1347.read().is_01() || !C1_load_1_phi_fu_878_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_1_reg_1347.read()) + sc_biguint<32>(C1_load_1_phi_fu_878_p3.read()));
}

void Matrix_Multiply::thread_C1_1_1_12_fu_904_p3() {
    C1_1_1_12_fu_904_p3 = (!tmp_11_reg_1309.read()[0].is_01())? sc_lv<32>(): ((tmp_11_reg_1309.read()[0].to_bool())? C1_1_0_fu_885_p2.read(): C1_1_1_9_fu_98.read());
}

void Matrix_Multiply::thread_C1_1_1_1_fu_890_p3() {
    C1_1_1_1_fu_890_p3 = (!tmp_11_reg_1309.read()[0].is_01())? sc_lv<32>(): ((tmp_11_reg_1309.read()[0].to_bool())? C1_1_0_fu_885_p2.read(): C1_1_1_11_fu_106.read());
}

void Matrix_Multiply::thread_C1_1_1_2_11_fu_897_p3() {
    C1_1_1_2_11_fu_897_p3 = (!tmp_11_reg_1309.read()[0].is_01())? sc_lv<32>(): ((tmp_11_reg_1309.read()[0].to_bool())? C1_1_1_10_fu_102.read(): C1_1_0_fu_885_p2.read());
}

void Matrix_Multiply::thread_C1_1_1_2_fu_453_p3() {
    C1_1_1_2_fu_453_p3 = (!tmp_2_reg_1097.read()[0].is_01())? sc_lv<32>(): ((tmp_2_reg_1097.read()[0].to_bool())? C1_1_1_8_fu_421_p3.read(): C1_1_1_fu_58.read());
}

void Matrix_Multiply::thread_C1_1_1_3_fu_911_p3() {
    C1_1_1_3_fu_911_p3 = (!tmp_11_reg_1309.read()[0].is_01())? sc_lv<32>(): ((tmp_11_reg_1309.read()[0].to_bool())? C1_1_1_4_fu_94.read(): C1_1_0_fu_885_p2.read());
}

void Matrix_Multiply::thread_C1_1_1_5_fu_918_p3() {
    C1_1_1_5_fu_918_p3 = (!tmp_8_reg_1291.read()[0].is_01())? sc_lv<32>(): ((tmp_8_reg_1291.read()[0].to_bool())? C1_1_1_1_fu_890_p3.read(): C1_1_1_11_fu_106.read());
}

void Matrix_Multiply::thread_C1_1_1_6_fu_925_p3() {
    C1_1_1_6_fu_925_p3 = (!tmp_8_reg_1291.read()[0].is_01())? sc_lv<32>(): ((tmp_8_reg_1291.read()[0].to_bool())? C1_1_1_2_11_fu_897_p3.read(): C1_1_1_10_fu_102.read());
}

void Matrix_Multiply::thread_C1_1_1_7_fu_932_p3() {
    C1_1_1_7_fu_932_p3 = (!tmp_8_reg_1291.read()[0].is_01())? sc_lv<32>(): ((tmp_8_reg_1291.read()[0].to_bool())? C1_1_1_9_fu_98.read(): C1_1_1_12_fu_904_p3.read());
}

void Matrix_Multiply::thread_C1_1_1_8_13_fu_939_p3() {
    C1_1_1_8_13_fu_939_p3 = (!tmp_8_reg_1291.read()[0].is_01())? sc_lv<32>(): ((tmp_8_reg_1291.read()[0].to_bool())? C1_1_1_4_fu_94.read(): C1_1_1_3_fu_911_p3.read());
}

void Matrix_Multiply::thread_C1_1_1_8_fu_421_p3() {
    C1_1_1_8_fu_421_p3 = (!tmp_4_fu_417_p1.read()[0].is_01())? sc_lv<32>(): ((tmp_4_fu_417_p1.read()[0].to_bool())? ap_const_lv32_0: C1_1_1_fu_58.read());
}

void Matrix_Multiply::thread_C1_load20_phi_fu_1017_p3() {
    C1_load20_phi_fu_1017_p3 = (!tmp_12_fu_1005_p1.read()[0].is_01())? sc_lv<32>(): ((tmp_12_fu_1005_p1.read()[0].to_bool())? C1_1_1_9_fu_98.read(): C1_1_1_4_fu_94.read());
}

void Matrix_Multiply::thread_C1_load21_phi_fu_1009_p3() {
    C1_load21_phi_fu_1009_p3 = (!tmp_12_fu_1005_p1.read()[0].is_01())? sc_lv<32>(): ((tmp_12_fu_1005_p1.read()[0].to_bool())? C1_1_1_11_fu_106.read(): C1_1_1_10_fu_102.read());
}

void Matrix_Multiply::thread_C1_load_125_phi_fu_871_p3() {
    C1_load_125_phi_fu_871_p3 = (!tmp_11_reg_1309.read()[0].is_01())? sc_lv<32>(): ((tmp_11_reg_1309.read()[0].to_bool())? C1_1_1_9_fu_98.read(): C1_1_1_4_fu_94.read());
}

void Matrix_Multiply::thread_C1_load_126_phi_fu_864_p3() {
    C1_load_126_phi_fu_864_p3 = (!tmp_11_reg_1309.read()[0].is_01())? sc_lv<32>(): ((tmp_11_reg_1309.read()[0].to_bool())? C1_1_1_11_fu_106.read(): C1_1_1_10_fu_102.read());
}

void Matrix_Multiply::thread_C1_load_1_phi_fu_878_p3() {
    C1_load_1_phi_fu_878_p3 = (!tmp_8_reg_1291.read()[0].is_01())? sc_lv<32>(): ((tmp_8_reg_1291.read()[0].to_bool())? C1_load_126_phi_fu_864_p3.read(): C1_load_125_phi_fu_871_p3.read());
}

void Matrix_Multiply::thread_C_Addr_A() {
    C_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): k_5_cast5_fu_988_p1.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void Matrix_Multiply::thread_C_Clk_A() {
    C_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void Matrix_Multiply::thread_C_Din_A() {
    C_Din_A = (!tmp_10_reg_1365.read()[0].is_01())? sc_lv<32>(): ((tmp_10_reg_1365.read()[0].to_bool())? C1_load21_phi_fu_1009_p3.read(): C1_load20_phi_fu_1017_p3.read());
}

void Matrix_Multiply::thread_C_EN_A() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()))) {
        C_EN_A = ap_const_logic_1;
    } else {
        C_EN_A = ap_const_logic_0;
    }
}

void Matrix_Multiply::thread_C_Rst_A() {
    C_Rst_A = ap_rst_n_inv.read();
}

void Matrix_Multiply::thread_C_WEN_A() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_993_p2.read())))) {
        C_WEN_A = ap_const_lv4_F;
    } else {
        C_WEN_A = ap_const_lv4_0;
    }
}

void Matrix_Multiply::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void Matrix_Multiply::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read().range(9, 9);
}

void Matrix_Multiply::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read().range(10, 10);
}

void Matrix_Multiply::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read().range(11, 11);
}

void Matrix_Multiply::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read().range(12, 12);
}

void Matrix_Multiply::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read().range(17, 17);
}

void Matrix_Multiply::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read().range(18, 18);
}

void Matrix_Multiply::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void Matrix_Multiply::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read().range(19, 19);
}

void Matrix_Multiply::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read().range(20, 20);
}

void Matrix_Multiply::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void Matrix_Multiply::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(3, 3);
}

void Matrix_Multiply::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read().range(4, 4);
}

void Matrix_Multiply::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read().range(5, 5);
}

void Matrix_Multiply::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read().range(6, 6);
}

void Matrix_Multiply::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read().range(7, 7);
}

void Matrix_Multiply::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read().range(8, 8);
}

void Matrix_Multiply::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_966_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Matrix_Multiply::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Matrix_Multiply::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_966_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Matrix_Multiply::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void Matrix_Multiply::thread_exitcond10_fu_389_p2() {
    exitcond10_fu_389_p2 = (!i1_reg_142.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_142.read() == ap_const_lv2_2);
}

void Matrix_Multiply::thread_exitcond1_fu_966_p2() {
    exitcond1_fu_966_p2 = (!i4_reg_309.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i4_reg_309.read() == ap_const_lv2_2);
}

void Matrix_Multiply::thread_exitcond2_fu_815_p2() {
    exitcond2_fu_815_p2 = (!k9_reg_274.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(k9_reg_274.read() == ap_const_lv2_2);
}

void Matrix_Multiply::thread_exitcond3_fu_783_p2() {
    exitcond3_fu_783_p2 = (!j8_reg_263.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(j8_reg_263.read() == ap_const_lv2_2);
}

void Matrix_Multiply::thread_exitcond4_fu_767_p2() {
    exitcond4_fu_767_p2 = (!i7_reg_252.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i7_reg_252.read() == ap_const_lv2_2);
}

void Matrix_Multiply::thread_exitcond5_fu_664_p2() {
    exitcond5_fu_664_p2 = (!j6_reg_231.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(j6_reg_231.read() == ap_const_lv2_2);
}

void Matrix_Multiply::thread_exitcond6_fu_626_p2() {
    exitcond6_fu_626_p2 = (!i5_reg_208.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i5_reg_208.read() == ap_const_lv2_2);
}

void Matrix_Multiply::thread_exitcond7_fu_523_p2() {
    exitcond7_fu_523_p2 = (!j4_reg_187.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(j4_reg_187.read() == ap_const_lv2_2);
}

void Matrix_Multiply::thread_exitcond8_fu_501_p2() {
    exitcond8_fu_501_p2 = (!i3_reg_164.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i3_reg_164.read() == ap_const_lv2_2);
}

void Matrix_Multiply::thread_exitcond9_fu_405_p2() {
    exitcond9_fu_405_p2 = (!j2_reg_153.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(j2_reg_153.read() == ap_const_lv2_2);
}

void Matrix_Multiply::thread_exitcond_fu_993_p2() {
    exitcond_fu_993_p2 = (!k_5_reg_320.read().is_01() || !indvars_iv_reg_285.read().is_01())? sc_lv<1>(): sc_lv<1>(k_5_reg_320.read() == indvars_iv_reg_285.read());
}

void Matrix_Multiply::thread_i_1_fu_507_p2() {
    i_1_fu_507_p2 = (!i3_reg_164.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i3_reg_164.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Matrix_Multiply::thread_i_2_fu_632_p2() {
    i_2_fu_632_p2 = (!i5_reg_208.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i5_reg_208.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Matrix_Multiply::thread_i_3_fu_773_p2() {
    i_3_fu_773_p2 = (!i7_reg_252.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i7_reg_252.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Matrix_Multiply::thread_i_4_fu_972_p2() {
    i_4_fu_972_p2 = (!i4_reg_309.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i4_reg_309.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Matrix_Multiply::thread_i_fu_395_p2() {
    i_fu_395_p2 = (!i1_reg_142.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i1_reg_142.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Matrix_Multiply::thread_indvars_iv_next_fu_1039_p2() {
    indvars_iv_next_fu_1039_p2 = (!indvars_iv_reg_285.read().is_01() || !ap_const_lv3_2.is_01())? sc_lv<3>(): (sc_biguint<3>(indvars_iv_reg_285.read()) + sc_biguint<3>(ap_const_lv3_2));
}

void Matrix_Multiply::thread_j_1_fu_529_p2() {
    j_1_fu_529_p2 = (!j4_reg_187.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(j4_reg_187.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Matrix_Multiply::thread_j_2_fu_670_p2() {
    j_2_fu_670_p2 = (!j6_reg_231.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(j6_reg_231.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Matrix_Multiply::thread_j_3_fu_999_p2() {
    j_3_fu_999_p2 = (!j3_reg_330.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(j3_reg_330.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Matrix_Multiply::thread_j_4_fu_789_p2() {
    j_4_fu_789_p2 = (!j8_reg_263.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(j8_reg_263.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Matrix_Multiply::thread_j_fu_411_p2() {
    j_fu_411_p2 = (!j2_reg_153.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(j2_reg_153.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Matrix_Multiply::thread_k_1_cast1_fu_535_p1() {
    k_1_cast1_fu_535_p1 = esl_zext<32,3>(k_1_reg_198.read());
}

void Matrix_Multiply::thread_k_3_cast2_fu_676_p1() {
    k_3_cast2_fu_676_p1 = esl_zext<32,4>(k_3_reg_242.read());
}

void Matrix_Multiply::thread_k_5_cast5_fu_988_p1() {
    k_5_cast5_fu_988_p1 = esl_zext<32,3>(k_5_reg_320.read());
}

void Matrix_Multiply::thread_k_6_fu_638_p2() {
    k_6_fu_638_p2 = (!ap_const_lv4_2.is_01() || !k_2_reg_219.read().is_01())? sc_lv<4>(): (sc_biguint<4>(ap_const_lv4_2) + sc_biguint<4>(k_2_reg_219.read()));
}

void Matrix_Multiply::thread_k_7_fu_685_p2() {
    k_7_fu_685_p2 = (!ap_const_lv4_1.is_01() || !k_3_reg_242.read().is_01())? sc_lv<4>(): (sc_biguint<4>(ap_const_lv4_1) + sc_biguint<4>(k_3_reg_242.read()));
}

void Matrix_Multiply::thread_k_8_fu_978_p2() {
    k_8_fu_978_p2 = (!ap_const_lv3_2.is_01() || !k_4_reg_297.read().is_01())? sc_lv<3>(): (sc_biguint<3>(ap_const_lv3_2) + sc_biguint<3>(k_4_reg_297.read()));
}

void Matrix_Multiply::thread_k_9_fu_821_p2() {
    k_9_fu_821_p2 = (!k9_reg_274.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(k9_reg_274.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Matrix_Multiply::thread_tmp_10_fu_984_p1() {
    tmp_10_fu_984_p1 = i4_reg_309.read().range(1-1, 0);
}

void Matrix_Multiply::thread_tmp_11_fu_795_p1() {
    tmp_11_fu_795_p1 = j8_reg_263.read().range(1-1, 0);
}

void Matrix_Multiply::thread_tmp_12_fu_1005_p1() {
    tmp_12_fu_1005_p1 = j3_reg_330.read().range(1-1, 0);
}

void Matrix_Multiply::thread_tmp_13_fu_827_p1() {
    tmp_13_fu_827_p1 = k9_reg_274.read().range(1-1, 0);
}

void Matrix_Multiply::thread_tmp_2_fu_401_p1() {
    tmp_2_fu_401_p1 = i1_reg_142.read().range(1-1, 0);
}

void Matrix_Multiply::thread_tmp_3_fu_519_p1() {
    tmp_3_fu_519_p1 = i3_reg_164.read().range(1-1, 0);
}

void Matrix_Multiply::thread_tmp_4_fu_417_p1() {
    tmp_4_fu_417_p1 = j2_reg_153.read().range(1-1, 0);
}

void Matrix_Multiply::thread_tmp_5_fu_544_p2() {
    tmp_5_fu_544_p2 = (!ap_const_lv3_1.is_01() || !k_1_reg_198.read().is_01())? sc_lv<3>(): (sc_biguint<3>(ap_const_lv3_1) + sc_biguint<3>(k_1_reg_198.read()));
}

void Matrix_Multiply::thread_tmp_6_fu_644_p1() {
    tmp_6_fu_644_p1 = i5_reg_208.read().range(1-1, 0);
}

void Matrix_Multiply::thread_tmp_7_fu_540_p1() {
    tmp_7_fu_540_p1 = j4_reg_187.read().range(1-1, 0);
}

void Matrix_Multiply::thread_tmp_8_fu_779_p1() {
    tmp_8_fu_779_p1 = i7_reg_252.read().range(1-1, 0);
}

void Matrix_Multiply::thread_tmp_9_fu_681_p1() {
    tmp_9_fu_681_p1 = j6_reg_231.read().range(1-1, 0);
}

void Matrix_Multiply::thread_tmp_fu_513_p2() {
    tmp_fu_513_p2 = (!ap_const_lv3_2.is_01() || !k_reg_175.read().is_01())? sc_lv<3>(): (sc_biguint<3>(ap_const_lv3_2) + sc_biguint<3>(k_reg_175.read()));
}

void Matrix_Multiply::thread_tmp_s_fu_1033_p2() {
    tmp_s_fu_1033_p2 = (!ap_const_lv3_1.is_01() || !k_5_reg_320.read().is_01())? sc_lv<3>(): (sc_biguint<3>(ap_const_lv3_1) + sc_biguint<3>(k_5_reg_320.read()));
}

void Matrix_Multiply::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond10_fu_389_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond9_fu_405_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond8_fu_501_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_fu_523_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 64 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_626_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond5_fu_664_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 512 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_767_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 1024 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_783_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 2048 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_815_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 524288 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_966_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state21;
            }
            break;
        case 1048576 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_993_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state21;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<21>) ("XXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void Matrix_Multiply::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"A_Addr_A\" :  \"" << A_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_EN_A\" :  \"" << A_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_WEN_A\" :  \"" << A_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_Din_A\" :  \"" << A_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_Dout_A\" :  \"" << A_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_Clk_A\" :  \"" << A_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_Rst_A\" :  \"" << A_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_Addr_A\" :  \"" << C_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_EN_A\" :  \"" << C_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_WEN_A\" :  \"" << C_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_Din_A\" :  \"" << C_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"C_Dout_A\" :  \"" << C_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_Clk_A\" :  \"" << C_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_Rst_A\" :  \"" << C_Rst_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWVALID\" :  \"" << s_axi_CRTL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_AWREADY\" :  \"" << s_axi_CRTL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWADDR\" :  \"" << s_axi_CRTL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WVALID\" :  \"" << s_axi_CRTL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_WREADY\" :  \"" << s_axi_CRTL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WDATA\" :  \"" << s_axi_CRTL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WSTRB\" :  \"" << s_axi_CRTL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARVALID\" :  \"" << s_axi_CRTL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_ARREADY\" :  \"" << s_axi_CRTL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARADDR\" :  \"" << s_axi_CRTL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RVALID\" :  \"" << s_axi_CRTL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_RREADY\" :  \"" << s_axi_CRTL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RDATA\" :  \"" << s_axi_CRTL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RRESP\" :  \"" << s_axi_CRTL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BVALID\" :  \"" << s_axi_CRTL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_BREADY\" :  \"" << s_axi_CRTL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BRESP\" :  \"" << s_axi_CRTL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

