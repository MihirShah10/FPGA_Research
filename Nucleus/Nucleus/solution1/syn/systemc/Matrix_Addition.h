// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Matrix_Addition_HH_
#define _Matrix_Addition_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Matrix_Addition_CRTL_BUS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CRTL_BUS_ADDR_WIDTH = 4,
         unsigned int C_S_AXI_CRTL_BUS_DATA_WIDTH = 32>
struct Matrix_Addition : public sc_module {
    // Port declarations 34
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<32> > D_Addr_A;
    sc_out< sc_logic > D_EN_A;
    sc_out< sc_lv<4> > D_WEN_A;
    sc_out< sc_lv<32> > D_Din_A;
    sc_in< sc_lv<32> > D_Dout_A;
    sc_out< sc_logic > D_Clk_A;
    sc_out< sc_logic > D_Rst_A;
    sc_out< sc_lv<32> > E_Addr_A;
    sc_out< sc_logic > E_EN_A;
    sc_out< sc_lv<4> > E_WEN_A;
    sc_out< sc_lv<32> > E_Din_A;
    sc_in< sc_lv<32> > E_Dout_A;
    sc_out< sc_logic > E_Clk_A;
    sc_out< sc_logic > E_Rst_A;
    sc_in< sc_logic > s_axi_CRTL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_ADDR_WIDTH> > s_axi_CRTL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CRTL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH> > s_axi_CRTL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH/8> > s_axi_CRTL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CRTL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_ADDR_WIDTH> > s_axi_CRTL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CRTL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CRTL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH> > s_axi_CRTL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CRTL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CRTL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CRTL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CRTL_BUS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    Matrix_Addition(sc_module_name name);
    SC_HAS_PROCESS(Matrix_Addition);

    ~Matrix_Addition();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Matrix_Addition_CRTL_BUS_s_axi<C_S_AXI_CRTL_BUS_ADDR_WIDTH,C_S_AXI_CRTL_BUS_DATA_WIDTH>* Matrix_Addition_CRTL_BUS_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > E1_load_reg_811;
    sc_signal< sc_lv<1> > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > E1_0_1_load_reg_816;
    sc_signal< sc_lv<32> > E1_1_load_reg_821;
    sc_signal< sc_lv<32> > E1_1_1_load_reg_826;
    sc_signal< sc_lv<2> > i_fu_302_p2;
    sc_signal< sc_lv<2> > i_reg_834;
    sc_signal< sc_lv<1> > tmp_1_fu_308_p1;
    sc_signal< sc_lv<1> > tmp_1_reg_839;
    sc_signal< sc_lv<1> > exitcond7_fu_296_p2;
    sc_signal< sc_lv<2> > j_fu_318_p2;
    sc_signal< sc_lv<1> > ap_CS_fsm_state3;
    sc_signal< sc_lv<2> > i_1_fu_414_p2;
    sc_signal< sc_lv<2> > i_1_reg_882;
    sc_signal< sc_lv<1> > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > k_4_fu_420_p2;
    sc_signal< sc_lv<3> > k_4_reg_887;
    sc_signal< sc_lv<1> > exitcond5_fu_408_p2;
    sc_signal< sc_lv<1> > tmp_2_fu_426_p1;
    sc_signal< sc_lv<1> > tmp_2_reg_892;
    sc_signal< sc_lv<2> > j_1_fu_452_p2;
    sc_signal< sc_lv<2> > j_1_reg_931;
    sc_signal< sc_lv<1> > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > exitcond4_fu_446_p2;
    sc_signal< sc_lv<1> > tmp_5_fu_463_p1;
    sc_signal< sc_lv<1> > tmp_5_reg_941;
    sc_signal< sc_lv<3> > tmp_fu_467_p2;
    sc_signal< sc_lv<3> > tmp_reg_949;
    sc_signal< sc_lv<2> > i_2_fu_555_p2;
    sc_signal< sc_lv<2> > i_2_reg_957;
    sc_signal< sc_lv<1> > ap_CS_fsm_state7;
    sc_signal< sc_lv<1> > tmp_4_fu_561_p1;
    sc_signal< sc_lv<1> > tmp_4_reg_962;
    sc_signal< sc_lv<1> > exitcond3_fu_549_p2;
    sc_signal< sc_lv<2> > j_2_fu_571_p2;
    sc_signal< sc_lv<1> > ap_CS_fsm_state8;
    sc_signal< sc_lv<2> > i_3_fu_714_p2;
    sc_signal< sc_lv<2> > i_3_reg_982;
    sc_signal< sc_lv<1> > ap_CS_fsm_state9;
    sc_signal< sc_lv<3> > k_5_fu_720_p2;
    sc_signal< sc_lv<3> > k_5_reg_987;
    sc_signal< sc_lv<1> > exitcond1_fu_708_p2;
    sc_signal< sc_lv<1> > tmp_6_fu_726_p1;
    sc_signal< sc_lv<1> > tmp_6_reg_992;
    sc_signal< sc_lv<2> > j_3_fu_741_p2;
    sc_signal< sc_lv<1> > ap_CS_fsm_state10;
    sc_signal< sc_lv<3> > tmp_7_fu_775_p2;
    sc_signal< sc_lv<1> > exitcond_fu_735_p2;
    sc_signal< sc_lv<3> > indvars_iv_next_fu_781_p2;
    sc_signal< sc_lv<2> > i1_reg_116;
    sc_signal< sc_lv<1> > exitcond6_fu_312_p2;
    sc_signal< sc_lv<2> > j2_reg_127;
    sc_signal< sc_lv<2> > i3_reg_138;
    sc_signal< sc_lv<3> > k_reg_149;
    sc_signal< sc_lv<2> > j4_reg_161;
    sc_signal< sc_lv<1> > ap_CS_fsm_state6;
    sc_signal< sc_lv<3> > k_1_reg_172;
    sc_signal< sc_lv<2> > i5_reg_182;
    sc_signal< sc_lv<1> > exitcond2_fu_565_p2;
    sc_signal< sc_lv<2> > j6_reg_193;
    sc_signal< sc_lv<3> > indvars_iv_reg_204;
    sc_signal< sc_lv<3> > k_2_reg_216;
    sc_signal< sc_lv<2> > i7_reg_228;
    sc_signal< sc_lv<3> > k_3_reg_239;
    sc_signal< sc_lv<2> > j8_reg_249;
    sc_signal< sc_lv<32> > k_1_cast1_fu_458_p1;
    sc_signal< sc_lv<32> > k_3_cast4_fu_730_p1;
    sc_signal< sc_lv<32> > E1_fu_44;
    sc_signal< sc_lv<32> > E1_0_0_2_fu_381_p3;
    sc_signal< sc_lv<32> > E1_0_1_fu_48;
    sc_signal< sc_lv<32> > E1_0_1_2_fu_374_p3;
    sc_signal< sc_lv<32> > E1_1_fu_52;
    sc_signal< sc_lv<32> > E1_1_0_2_fu_367_p3;
    sc_signal< sc_lv<32> > E1_1_1_fu_56;
    sc_signal< sc_lv<32> > E1_1_1_2_fu_360_p3;
    sc_signal< sc_lv<32> > D1_1_1_4_fu_60;
    sc_signal< sc_lv<32> > D1_1_1_8_fu_522_p3;
    sc_signal< sc_lv<32> > D1_1_1_9_fu_64;
    sc_signal< sc_lv<32> > D1_1_1_7_fu_515_p3;
    sc_signal< sc_lv<32> > D1_1_1_10_fu_68;
    sc_signal< sc_lv<32> > D1_1_1_6_fu_508_p3;
    sc_signal< sc_lv<32> > D1_1_1_11_fu_72;
    sc_signal< sc_lv<32> > D1_1_1_5_fu_501_p3;
    sc_signal< sc_lv<32> > E1_1_1_4_fu_76;
    sc_signal< sc_lv<32> > E1_1_1_8_fu_681_p3;
    sc_signal< sc_lv<32> > E1_1_1_9_fu_80;
    sc_signal< sc_lv<32> > E1_1_1_7_13_fu_674_p3;
    sc_signal< sc_lv<32> > E1_1_1_10_fu_84;
    sc_signal< sc_lv<32> > E1_1_1_6_fu_667_p3;
    sc_signal< sc_lv<32> > E1_1_1_11_fu_88;
    sc_signal< sc_lv<32> > E1_1_1_5_fu_660_p3;
    sc_signal< sc_lv<1> > tmp_3_fu_324_p1;
    sc_signal< sc_lv<32> > E1_1_1_7_fu_328_p3;
    sc_signal< sc_lv<32> > E1_1_0_7_fu_336_p3;
    sc_signal< sc_lv<32> > E1_0_1_7_fu_344_p3;
    sc_signal< sc_lv<32> > E1_0_0_7_fu_352_p3;
    sc_signal< sc_lv<32> > D1_1_1_1_fu_473_p3;
    sc_signal< sc_lv<32> > D1_1_1_2_fu_480_p3;
    sc_signal< sc_lv<32> > D1_1_1_fu_487_p3;
    sc_signal< sc_lv<32> > D1_1_1_3_fu_494_p3;
    sc_signal< sc_lv<1> > tmp_8_fu_577_p1;
    sc_signal< sc_lv<31> > tmp_9_fu_581_p1;
    sc_signal< sc_lv<31> > tmp_10_fu_585_p1;
    sc_signal< sc_lv<31> > tmp_12_fu_597_p1;
    sc_signal< sc_lv<31> > tmp_13_fu_601_p1;
    sc_signal< sc_lv<31> > tmp_11_fu_589_p3;
    sc_signal< sc_lv<31> > tmp_14_fu_605_p3;
    sc_signal< sc_lv<31> > tmp_15_fu_613_p3;
    sc_signal< sc_lv<32> > E1_1_0_fu_620_p3;
    sc_signal< sc_lv<32> > E1_1_1_1_fu_628_p3;
    sc_signal< sc_lv<32> > E1_1_1_2_11_fu_636_p3;
    sc_signal< sc_lv<32> > E1_1_1_12_fu_644_p3;
    sc_signal< sc_lv<32> > E1_1_1_3_fu_652_p3;
    sc_signal< sc_lv<1> > tmp_16_fu_747_p1;
    sc_signal< sc_lv<32> > E1_load13_phi_fu_751_p3;
    sc_signal< sc_lv<32> > E1_load12_phi_fu_759_p3;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_state5;
    static const sc_lv<10> ap_ST_fsm_state6;
    static const sc_lv<10> ap_ST_fsm_state7;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_state9;
    static const sc_lv<10> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<3> ap_const_lv3_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_D1_1_1_1_fu_473_p3();
    void thread_D1_1_1_2_fu_480_p3();
    void thread_D1_1_1_3_fu_494_p3();
    void thread_D1_1_1_5_fu_501_p3();
    void thread_D1_1_1_6_fu_508_p3();
    void thread_D1_1_1_7_fu_515_p3();
    void thread_D1_1_1_8_fu_522_p3();
    void thread_D1_1_1_fu_487_p3();
    void thread_D_Addr_A();
    void thread_D_Clk_A();
    void thread_D_Din_A();
    void thread_D_EN_A();
    void thread_D_Rst_A();
    void thread_D_WEN_A();
    void thread_E1_0_0_2_fu_381_p3();
    void thread_E1_0_0_7_fu_352_p3();
    void thread_E1_0_1_2_fu_374_p3();
    void thread_E1_0_1_7_fu_344_p3();
    void thread_E1_1_0_2_fu_367_p3();
    void thread_E1_1_0_7_fu_336_p3();
    void thread_E1_1_0_fu_620_p3();
    void thread_E1_1_1_12_fu_644_p3();
    void thread_E1_1_1_1_fu_628_p3();
    void thread_E1_1_1_2_11_fu_636_p3();
    void thread_E1_1_1_2_fu_360_p3();
    void thread_E1_1_1_3_fu_652_p3();
    void thread_E1_1_1_5_fu_660_p3();
    void thread_E1_1_1_6_fu_667_p3();
    void thread_E1_1_1_7_13_fu_674_p3();
    void thread_E1_1_1_7_fu_328_p3();
    void thread_E1_1_1_8_fu_681_p3();
    void thread_E1_load12_phi_fu_759_p3();
    void thread_E1_load13_phi_fu_751_p3();
    void thread_E_Addr_A();
    void thread_E_Clk_A();
    void thread_E_Din_A();
    void thread_E_EN_A();
    void thread_E_Rst_A();
    void thread_E_WEN_A();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_exitcond1_fu_708_p2();
    void thread_exitcond2_fu_565_p2();
    void thread_exitcond3_fu_549_p2();
    void thread_exitcond4_fu_446_p2();
    void thread_exitcond5_fu_408_p2();
    void thread_exitcond6_fu_312_p2();
    void thread_exitcond7_fu_296_p2();
    void thread_exitcond_fu_735_p2();
    void thread_i_1_fu_414_p2();
    void thread_i_2_fu_555_p2();
    void thread_i_3_fu_714_p2();
    void thread_i_fu_302_p2();
    void thread_indvars_iv_next_fu_781_p2();
    void thread_j_1_fu_452_p2();
    void thread_j_2_fu_571_p2();
    void thread_j_3_fu_741_p2();
    void thread_j_fu_318_p2();
    void thread_k_1_cast1_fu_458_p1();
    void thread_k_3_cast4_fu_730_p1();
    void thread_k_4_fu_420_p2();
    void thread_k_5_fu_720_p2();
    void thread_tmp_10_fu_585_p1();
    void thread_tmp_11_fu_589_p3();
    void thread_tmp_12_fu_597_p1();
    void thread_tmp_13_fu_601_p1();
    void thread_tmp_14_fu_605_p3();
    void thread_tmp_15_fu_613_p3();
    void thread_tmp_16_fu_747_p1();
    void thread_tmp_1_fu_308_p1();
    void thread_tmp_2_fu_426_p1();
    void thread_tmp_3_fu_324_p1();
    void thread_tmp_4_fu_561_p1();
    void thread_tmp_5_fu_463_p1();
    void thread_tmp_6_fu_726_p1();
    void thread_tmp_7_fu_775_p2();
    void thread_tmp_8_fu_577_p1();
    void thread_tmp_9_fu_581_p1();
    void thread_tmp_fu_467_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
