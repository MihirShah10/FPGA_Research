-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Matrix_Addition is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    D_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    D_EN_A : OUT STD_LOGIC;
    D_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    D_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    D_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    D_Clk_A : OUT STD_LOGIC;
    D_Rst_A : OUT STD_LOGIC;
    E_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    E_EN_A : OUT STD_LOGIC;
    E_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    E_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    E_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    E_Clk_A : OUT STD_LOGIC;
    E_Rst_A : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Matrix_Addition is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Matrix_Addition,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.681000,HLS_SYN_LAT=40,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=613,HLS_SYN_LUT=1211}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal E1_load_reg_811 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal E1_0_1_load_reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_1_load_reg_821 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_1_1_load_reg_826 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_302_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_834 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_308_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_839 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond7_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_318_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_fu_414_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_882 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal k_4_fu_420_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_4_reg_887 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond5_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_426_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_892 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_452_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_931 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond4_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_463_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_941 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_467_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_949 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_fu_555_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_957 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_4_fu_561_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_962 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_571_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_3_fu_714_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_reg_982 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal k_5_fu_720_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_5_reg_987 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_726_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_992 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_741_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_7_fu_775_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next_fu_781_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i1_reg_116 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond6_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j2_reg_127 : STD_LOGIC_VECTOR (1 downto 0);
    signal i3_reg_138 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_149 : STD_LOGIC_VECTOR (2 downto 0);
    signal j4_reg_161 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal k_1_reg_172 : STD_LOGIC_VECTOR (2 downto 0);
    signal i5_reg_182 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond2_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j6_reg_193 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvars_iv_reg_204 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_2_reg_216 : STD_LOGIC_VECTOR (2 downto 0);
    signal i7_reg_228 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_3_reg_239 : STD_LOGIC_VECTOR (2 downto 0);
    signal j8_reg_249 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_1_cast1_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_3_cast4_fu_730_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_fu_44 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_0_0_2_fu_381_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_0_1_fu_48 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_0_1_2_fu_374_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_1_fu_52 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_1_0_2_fu_367_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_1_1_fu_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_1_1_2_fu_360_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal D1_1_1_4_fu_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal D1_1_1_8_fu_522_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal D1_1_1_9_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal D1_1_1_7_fu_515_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal D1_1_1_10_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal D1_1_1_6_fu_508_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal D1_1_1_11_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal D1_1_1_5_fu_501_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_1_1_4_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_1_1_8_fu_681_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_1_1_9_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_1_1_7_13_fu_674_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_1_1_10_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_1_1_6_fu_667_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_1_1_11_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_1_1_5_fu_660_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_324_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal E1_1_1_7_fu_328_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_1_0_7_fu_336_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_0_1_7_fu_344_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_0_0_7_fu_352_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal D1_1_1_1_fu_473_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal D1_1_1_2_fu_480_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal D1_1_1_fu_487_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal D1_1_1_3_fu_494_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_577_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_581_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_fu_585_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_12_fu_597_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_13_fu_601_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_11_fu_589_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_14_fu_605_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_15_fu_613_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal E1_1_0_fu_620_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_1_1_1_fu_628_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_1_1_2_11_fu_636_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_1_1_12_fu_644_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_1_1_3_fu_652_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_747_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal E1_load13_phi_fu_751_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_load12_phi_fu_759_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component Matrix_Addition_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    Matrix_Addition_CRTL_BUS_s_axi_U : component Matrix_Addition_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    E1_1_1_10_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond2_fu_565_p2))) then 
                E1_1_1_10_fu_84 <= E1_1_1_6_fu_667_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = exitcond5_fu_408_p2)))) then 
                E1_1_1_10_fu_84 <= E1_1_load_reg_821;
            end if; 
        end if;
    end process;

    E1_1_1_11_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond2_fu_565_p2))) then 
                E1_1_1_11_fu_88 <= E1_1_1_5_fu_660_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = exitcond5_fu_408_p2)))) then 
                E1_1_1_11_fu_88 <= E1_1_1_load_reg_826;
            end if; 
        end if;
    end process;

    E1_1_1_4_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond2_fu_565_p2))) then 
                E1_1_1_4_fu_76 <= E1_1_1_8_fu_681_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = exitcond5_fu_408_p2)))) then 
                E1_1_1_4_fu_76 <= E1_load_reg_811;
            end if; 
        end if;
    end process;

    E1_1_1_9_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond2_fu_565_p2))) then 
                E1_1_1_9_fu_80 <= E1_1_1_7_13_fu_674_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = exitcond5_fu_408_p2)))) then 
                E1_1_1_9_fu_80 <= E1_0_1_load_reg_816;
            end if; 
        end if;
    end process;

    i1_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond6_fu_312_p2)))) then 
                i1_reg_116 <= i_reg_834;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i1_reg_116 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i3_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond4_fu_446_p2)))) then 
                i3_reg_138 <= i_1_reg_882;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond7_fu_296_p2 = ap_const_lv1_0)))) then 
                i3_reg_138 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i5_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8) and not((ap_const_lv1_0 = exitcond2_fu_565_p2)))) then 
                i5_reg_182 <= i_2_reg_957;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = exitcond5_fu_408_p2)))) then 
                i5_reg_182 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i7_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7) and not((ap_const_lv1_0 = exitcond3_fu_549_p2)))) then 
                i7_reg_228 <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((ap_const_lv1_0 = exitcond_fu_735_p2)))) then 
                i7_reg_228 <= i_3_reg_982;
            end if; 
        end if;
    end process;

    indvars_iv_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7) and not((ap_const_lv1_0 = exitcond3_fu_549_p2)))) then 
                indvars_iv_reg_204 <= ap_const_lv3_2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((ap_const_lv1_0 = exitcond_fu_735_p2)))) then 
                indvars_iv_reg_204 <= indvars_iv_next_fu_781_p2;
            end if; 
        end if;
    end process;

    j2_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond7_fu_296_p2 = ap_const_lv1_0))) then 
                j2_reg_127 <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_312_p2))) then 
                j2_reg_127 <= j_fu_318_p2;
            end if; 
        end if;
    end process;

    j4_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                j4_reg_161 <= j_1_reg_931;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond5_fu_408_p2))) then 
                j4_reg_161 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j6_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond3_fu_549_p2))) then 
                j6_reg_193 <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond2_fu_565_p2))) then 
                j6_reg_193 <= j_2_fu_571_p2;
            end if; 
        end if;
    end process;

    j8_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond_fu_735_p2))) then 
                j8_reg_249 <= j_3_fu_741_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_fu_708_p2))) then 
                j8_reg_249 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_1_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                k_1_reg_172 <= tmp_reg_949;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond5_fu_408_p2))) then 
                k_1_reg_172 <= k_reg_149;
            end if; 
        end if;
    end process;

    k_2_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7) and not((ap_const_lv1_0 = exitcond3_fu_549_p2)))) then 
                k_2_reg_216 <= ap_const_lv3_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((ap_const_lv1_0 = exitcond_fu_735_p2)))) then 
                k_2_reg_216 <= k_5_reg_987;
            end if; 
        end if;
    end process;

    k_3_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond_fu_735_p2))) then 
                k_3_reg_239 <= tmp_7_fu_775_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_fu_708_p2))) then 
                k_3_reg_239 <= k_2_reg_216;
            end if; 
        end if;
    end process;

    k_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond4_fu_446_p2)))) then 
                k_reg_149 <= k_4_reg_887;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond7_fu_296_p2 = ap_const_lv1_0)))) then 
                k_reg_149 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                D1_1_1_10_fu_68 <= D1_1_1_6_fu_508_p3;
                D1_1_1_11_fu_72 <= D1_1_1_5_fu_501_p3;
                D1_1_1_4_fu_60 <= D1_1_1_8_fu_522_p3;
                D1_1_1_9_fu_64 <= D1_1_1_7_fu_515_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_312_p2))) then
                E1_0_1_fu_48 <= E1_0_1_2_fu_374_p3;
                E1_1_1_fu_56 <= E1_1_1_2_fu_360_p3;
                E1_1_fu_52 <= E1_1_0_2_fu_367_p3;
                E1_fu_44 <= E1_0_0_2_fu_381_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                E1_0_1_load_reg_816 <= E1_0_1_fu_48;
                E1_1_1_load_reg_826 <= E1_1_1_fu_56;
                E1_1_load_reg_821 <= E1_1_fu_52;
                E1_load_reg_811 <= E1_fu_44;
                i_reg_834 <= i_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                i_1_reg_882 <= i_1_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then
                i_2_reg_957 <= i_2_fu_555_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                i_3_reg_982 <= i_3_fu_714_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                j_1_reg_931 <= j_1_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond5_fu_408_p2))) then
                k_4_reg_887 <= k_4_fu_420_p2;
                tmp_2_reg_892 <= tmp_2_fu_426_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_fu_708_p2))) then
                k_5_reg_987 <= k_5_fu_720_p2;
                tmp_6_reg_992 <= tmp_6_fu_726_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond7_fu_296_p2 = ap_const_lv1_0))) then
                tmp_1_reg_839 <= tmp_1_fu_308_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond3_fu_549_p2))) then
                tmp_4_reg_962 <= tmp_4_fu_561_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_446_p2))) then
                tmp_5_reg_941 <= tmp_5_fu_463_p1;
                tmp_reg_949 <= tmp_fu_467_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond7_fu_296_p2, exitcond5_fu_408_p2, exitcond4_fu_446_p2, exitcond3_fu_549_p2, exitcond1_fu_708_p2, exitcond_fu_735_p2, exitcond6_fu_312_p2, exitcond2_fu_565_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((exitcond7_fu_296_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = exitcond6_fu_312_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (not((ap_const_lv1_0 = exitcond5_fu_408_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_446_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_549_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_565_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_708_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (not((ap_const_lv1_0 = exitcond_fu_735_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    D1_1_1_1_fu_473_p3 <= 
        D_Dout_A when (tmp_5_reg_941(0) = '1') else 
        D1_1_1_11_fu_72;
    D1_1_1_2_fu_480_p3 <= 
        D1_1_1_10_fu_68 when (tmp_5_reg_941(0) = '1') else 
        D_Dout_A;
    D1_1_1_3_fu_494_p3 <= 
        D1_1_1_4_fu_60 when (tmp_5_reg_941(0) = '1') else 
        D_Dout_A;
    D1_1_1_5_fu_501_p3 <= 
        D1_1_1_1_fu_473_p3 when (tmp_2_reg_892(0) = '1') else 
        D1_1_1_11_fu_72;
    D1_1_1_6_fu_508_p3 <= 
        D1_1_1_2_fu_480_p3 when (tmp_2_reg_892(0) = '1') else 
        D1_1_1_10_fu_68;
    D1_1_1_7_fu_515_p3 <= 
        D1_1_1_9_fu_64 when (tmp_2_reg_892(0) = '1') else 
        D1_1_1_fu_487_p3;
    D1_1_1_8_fu_522_p3 <= 
        D1_1_1_4_fu_60 when (tmp_2_reg_892(0) = '1') else 
        D1_1_1_3_fu_494_p3;
    D1_1_1_fu_487_p3 <= 
        D_Dout_A when (tmp_5_reg_941(0) = '1') else 
        D1_1_1_9_fu_64;
    D_Addr_A <= std_logic_vector(shift_left(unsigned(k_1_cast1_fu_458_p1),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    D_Clk_A <= ap_clk;
    D_Din_A <= ap_const_lv32_0;

    D_EN_A_assign_proc : process(ap_CS_fsm_state5)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            D_EN_A <= ap_const_logic_1;
        else 
            D_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    D_Rst_A <= ap_rst_n_inv;
    D_WEN_A <= ap_const_lv4_0;
    E1_0_0_2_fu_381_p3 <= 
        E1_fu_44 when (tmp_1_reg_839(0) = '1') else 
        E1_0_0_7_fu_352_p3;
    E1_0_0_7_fu_352_p3 <= 
        E1_fu_44 when (tmp_3_fu_324_p1(0) = '1') else 
        ap_const_lv32_0;
    E1_0_1_2_fu_374_p3 <= 
        E1_0_1_fu_48 when (tmp_1_reg_839(0) = '1') else 
        E1_0_1_7_fu_344_p3;
    E1_0_1_7_fu_344_p3 <= 
        ap_const_lv32_0 when (tmp_3_fu_324_p1(0) = '1') else 
        E1_0_1_fu_48;
    E1_1_0_2_fu_367_p3 <= 
        E1_1_0_7_fu_336_p3 when (tmp_1_reg_839(0) = '1') else 
        E1_1_fu_52;
    E1_1_0_7_fu_336_p3 <= 
        E1_1_fu_52 when (tmp_3_fu_324_p1(0) = '1') else 
        ap_const_lv32_0;
    E1_1_0_fu_620_p3 <= (tmp_15_fu_613_p3 & ap_const_lv1_0);
    E1_1_1_12_fu_644_p3 <= 
        E1_1_0_fu_620_p3 when (tmp_8_fu_577_p1(0) = '1') else 
        E1_1_1_9_fu_80;
    E1_1_1_1_fu_628_p3 <= 
        E1_1_0_fu_620_p3 when (tmp_8_fu_577_p1(0) = '1') else 
        E1_1_1_11_fu_88;
    E1_1_1_2_11_fu_636_p3 <= 
        E1_1_1_10_fu_84 when (tmp_8_fu_577_p1(0) = '1') else 
        E1_1_0_fu_620_p3;
    E1_1_1_2_fu_360_p3 <= 
        E1_1_1_7_fu_328_p3 when (tmp_1_reg_839(0) = '1') else 
        E1_1_1_fu_56;
    E1_1_1_3_fu_652_p3 <= 
        E1_1_1_4_fu_76 when (tmp_8_fu_577_p1(0) = '1') else 
        E1_1_0_fu_620_p3;
    E1_1_1_5_fu_660_p3 <= 
        E1_1_1_1_fu_628_p3 when (tmp_4_reg_962(0) = '1') else 
        E1_1_1_11_fu_88;
    E1_1_1_6_fu_667_p3 <= 
        E1_1_1_2_11_fu_636_p3 when (tmp_4_reg_962(0) = '1') else 
        E1_1_1_10_fu_84;
    E1_1_1_7_13_fu_674_p3 <= 
        E1_1_1_9_fu_80 when (tmp_4_reg_962(0) = '1') else 
        E1_1_1_12_fu_644_p3;
    E1_1_1_7_fu_328_p3 <= 
        ap_const_lv32_0 when (tmp_3_fu_324_p1(0) = '1') else 
        E1_1_1_fu_56;
    E1_1_1_8_fu_681_p3 <= 
        E1_1_1_4_fu_76 when (tmp_4_reg_962(0) = '1') else 
        E1_1_1_3_fu_652_p3;
    E1_load12_phi_fu_759_p3 <= 
        E1_1_1_9_fu_80 when (tmp_16_fu_747_p1(0) = '1') else 
        E1_1_1_4_fu_76;
    E1_load13_phi_fu_751_p3 <= 
        E1_1_1_11_fu_88 when (tmp_16_fu_747_p1(0) = '1') else 
        E1_1_1_10_fu_84;
    E_Addr_A <= std_logic_vector(shift_left(unsigned(k_3_cast4_fu_730_p1),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    E_Clk_A <= ap_clk;
    E_Din_A <= 
        E1_load13_phi_fu_751_p3 when (tmp_6_reg_992(0) = '1') else 
        E1_load12_phi_fu_759_p3;

    E_EN_A_assign_proc : process(ap_CS_fsm_state10)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            E_EN_A <= ap_const_logic_1;
        else 
            E_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    E_Rst_A <= ap_rst_n_inv;

    E_WEN_A_assign_proc : process(ap_CS_fsm_state10, exitcond_fu_735_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond_fu_735_p2)))) then 
            E_WEN_A <= ap_const_lv4_F;
        else 
            E_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_CS_fsm_state9, exitcond1_fu_708_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = exitcond1_fu_708_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, exitcond1_fu_708_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = exitcond1_fu_708_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond1_fu_708_p2 <= "1" when (i7_reg_228 = ap_const_lv2_2) else "0";
    exitcond2_fu_565_p2 <= "1" when (j6_reg_193 = ap_const_lv2_2) else "0";
    exitcond3_fu_549_p2 <= "1" when (i5_reg_182 = ap_const_lv2_2) else "0";
    exitcond4_fu_446_p2 <= "1" when (j4_reg_161 = ap_const_lv2_2) else "0";
    exitcond5_fu_408_p2 <= "1" when (i3_reg_138 = ap_const_lv2_2) else "0";
    exitcond6_fu_312_p2 <= "1" when (j2_reg_127 = ap_const_lv2_2) else "0";
    exitcond7_fu_296_p2 <= "1" when (i1_reg_116 = ap_const_lv2_2) else "0";
    exitcond_fu_735_p2 <= "1" when (k_3_reg_239 = indvars_iv_reg_204) else "0";
    i_1_fu_414_p2 <= std_logic_vector(unsigned(i3_reg_138) + unsigned(ap_const_lv2_1));
    i_2_fu_555_p2 <= std_logic_vector(unsigned(i5_reg_182) + unsigned(ap_const_lv2_1));
    i_3_fu_714_p2 <= std_logic_vector(unsigned(i7_reg_228) + unsigned(ap_const_lv2_1));
    i_fu_302_p2 <= std_logic_vector(unsigned(i1_reg_116) + unsigned(ap_const_lv2_1));
    indvars_iv_next_fu_781_p2 <= std_logic_vector(unsigned(indvars_iv_reg_204) + unsigned(ap_const_lv3_2));
    j_1_fu_452_p2 <= std_logic_vector(unsigned(j4_reg_161) + unsigned(ap_const_lv2_1));
    j_2_fu_571_p2 <= std_logic_vector(unsigned(j6_reg_193) + unsigned(ap_const_lv2_1));
    j_3_fu_741_p2 <= std_logic_vector(unsigned(j8_reg_249) + unsigned(ap_const_lv2_1));
    j_fu_318_p2 <= std_logic_vector(unsigned(j2_reg_127) + unsigned(ap_const_lv2_1));
    k_1_cast1_fu_458_p1 <= std_logic_vector(resize(unsigned(k_1_reg_172),32));
    k_3_cast4_fu_730_p1 <= std_logic_vector(resize(unsigned(k_3_reg_239),32));
    k_4_fu_420_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(k_reg_149));
    k_5_fu_720_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(k_2_reg_216));
    tmp_10_fu_585_p1 <= D1_1_1_10_fu_68(31 - 1 downto 0);
    tmp_11_fu_589_p3 <= 
        tmp_9_fu_581_p1 when (tmp_8_fu_577_p1(0) = '1') else 
        tmp_10_fu_585_p1;
    tmp_12_fu_597_p1 <= D1_1_1_9_fu_64(31 - 1 downto 0);
    tmp_13_fu_601_p1 <= D1_1_1_4_fu_60(31 - 1 downto 0);
    tmp_14_fu_605_p3 <= 
        tmp_12_fu_597_p1 when (tmp_8_fu_577_p1(0) = '1') else 
        tmp_13_fu_601_p1;
    tmp_15_fu_613_p3 <= 
        tmp_11_fu_589_p3 when (tmp_4_reg_962(0) = '1') else 
        tmp_14_fu_605_p3;
    tmp_16_fu_747_p1 <= j8_reg_249(1 - 1 downto 0);
    tmp_1_fu_308_p1 <= i1_reg_116(1 - 1 downto 0);
    tmp_2_fu_426_p1 <= i3_reg_138(1 - 1 downto 0);
    tmp_3_fu_324_p1 <= j2_reg_127(1 - 1 downto 0);
    tmp_4_fu_561_p1 <= i5_reg_182(1 - 1 downto 0);
    tmp_5_fu_463_p1 <= j4_reg_161(1 - 1 downto 0);
    tmp_6_fu_726_p1 <= i7_reg_228(1 - 1 downto 0);
    tmp_7_fu_775_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(k_3_reg_239));
    tmp_8_fu_577_p1 <= j6_reg_193(1 - 1 downto 0);
    tmp_9_fu_581_p1 <= D1_1_1_11_fu_72(31 - 1 downto 0);
    tmp_fu_467_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(k_1_reg_172));
end behav;
