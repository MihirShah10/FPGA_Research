// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Matrix_Addition,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.681000,HLS_SYN_LAT=40,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=613,HLS_SYN_LUT=1211}" *)

module Matrix_Addition (
        ap_clk,
        ap_rst_n,
        D_Addr_A,
        D_EN_A,
        D_WEN_A,
        D_Din_A,
        D_Dout_A,
        D_Clk_A,
        D_Rst_A,
        E_Addr_A,
        E_EN_A,
        E_WEN_A,
        E_Din_A,
        E_Dout_A,
        E_Clk_A,
        E_Rst_A,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 10'b1;
parameter    ap_ST_fsm_state2 = 10'b10;
parameter    ap_ST_fsm_state3 = 10'b100;
parameter    ap_ST_fsm_state4 = 10'b1000;
parameter    ap_ST_fsm_state5 = 10'b10000;
parameter    ap_ST_fsm_state6 = 10'b100000;
parameter    ap_ST_fsm_state7 = 10'b1000000;
parameter    ap_ST_fsm_state8 = 10'b10000000;
parameter    ap_ST_fsm_state9 = 10'b100000000;
parameter    ap_ST_fsm_state10 = 10'b1000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv3_2 = 3'b10;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv3_1 = 3'b1;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (C_S_AXI_CRTL_BUS_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] D_Addr_A;
output   D_EN_A;
output  [3:0] D_WEN_A;
output  [31:0] D_Din_A;
input  [31:0] D_Dout_A;
output   D_Clk_A;
output   D_Rst_A;
output  [31:0] E_Addr_A;
output   E_EN_A;
output  [3:0] E_WEN_A;
output  [31:0] E_Din_A;
input  [31:0] E_Dout_A;
output   E_Clk_A;
output   E_Rst_A;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1 : 0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1 : 0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1 : 0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

reg D_EN_A;
reg E_EN_A;
reg[3:0] E_WEN_A;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] E1_load_reg_811;
wire   [0:0] ap_CS_fsm_state2;
reg   [31:0] E1_0_1_load_reg_816;
reg   [31:0] E1_1_load_reg_821;
reg   [31:0] E1_1_1_load_reg_826;
wire   [1:0] i_fu_302_p2;
reg   [1:0] i_reg_834;
wire   [0:0] tmp_1_fu_308_p1;
reg   [0:0] tmp_1_reg_839;
wire   [0:0] exitcond7_fu_296_p2;
wire   [1:0] j_fu_318_p2;
wire   [0:0] ap_CS_fsm_state3;
wire   [1:0] i_1_fu_414_p2;
reg   [1:0] i_1_reg_882;
wire   [0:0] ap_CS_fsm_state4;
wire   [2:0] k_4_fu_420_p2;
reg   [2:0] k_4_reg_887;
wire   [0:0] exitcond5_fu_408_p2;
wire   [0:0] tmp_2_fu_426_p1;
reg   [0:0] tmp_2_reg_892;
wire   [1:0] j_1_fu_452_p2;
reg   [1:0] j_1_reg_931;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] exitcond4_fu_446_p2;
wire   [0:0] tmp_5_fu_463_p1;
reg   [0:0] tmp_5_reg_941;
wire   [2:0] tmp_fu_467_p2;
reg   [2:0] tmp_reg_949;
wire   [1:0] i_2_fu_555_p2;
reg   [1:0] i_2_reg_957;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] tmp_4_fu_561_p1;
reg   [0:0] tmp_4_reg_962;
wire   [0:0] exitcond3_fu_549_p2;
wire   [1:0] j_2_fu_571_p2;
wire   [0:0] ap_CS_fsm_state8;
wire   [1:0] i_3_fu_714_p2;
reg   [1:0] i_3_reg_982;
wire   [0:0] ap_CS_fsm_state9;
wire   [2:0] k_5_fu_720_p2;
reg   [2:0] k_5_reg_987;
wire   [0:0] exitcond1_fu_708_p2;
wire   [0:0] tmp_6_fu_726_p1;
reg   [0:0] tmp_6_reg_992;
wire   [1:0] j_3_fu_741_p2;
wire   [0:0] ap_CS_fsm_state10;
wire   [2:0] tmp_7_fu_775_p2;
wire   [0:0] exitcond_fu_735_p2;
wire   [2:0] indvars_iv_next_fu_781_p2;
reg   [1:0] i1_reg_116;
wire   [0:0] exitcond6_fu_312_p2;
reg   [1:0] j2_reg_127;
reg   [1:0] i3_reg_138;
reg   [2:0] k_reg_149;
reg   [1:0] j4_reg_161;
wire   [0:0] ap_CS_fsm_state6;
reg   [2:0] k_1_reg_172;
reg   [1:0] i5_reg_182;
wire   [0:0] exitcond2_fu_565_p2;
reg   [1:0] j6_reg_193;
reg   [2:0] indvars_iv_reg_204;
reg   [2:0] k_2_reg_216;
reg   [1:0] i7_reg_228;
reg   [2:0] k_3_reg_239;
reg   [1:0] j8_reg_249;
wire   [31:0] k_1_cast1_fu_458_p1;
wire   [31:0] k_3_cast4_fu_730_p1;
reg   [31:0] E1_fu_44;
wire   [31:0] E1_0_0_2_fu_381_p3;
reg   [31:0] E1_0_1_fu_48;
wire   [31:0] E1_0_1_2_fu_374_p3;
reg   [31:0] E1_1_fu_52;
wire   [31:0] E1_1_0_2_fu_367_p3;
reg   [31:0] E1_1_1_fu_56;
wire   [31:0] E1_1_1_2_fu_360_p3;
reg   [31:0] D1_1_1_4_fu_60;
wire   [31:0] D1_1_1_8_fu_522_p3;
reg   [31:0] D1_1_1_9_fu_64;
wire   [31:0] D1_1_1_7_fu_515_p3;
reg   [31:0] D1_1_1_10_fu_68;
wire   [31:0] D1_1_1_6_fu_508_p3;
reg   [31:0] D1_1_1_11_fu_72;
wire   [31:0] D1_1_1_5_fu_501_p3;
reg   [31:0] E1_1_1_4_fu_76;
wire   [31:0] E1_1_1_8_fu_681_p3;
reg   [31:0] E1_1_1_9_fu_80;
wire   [31:0] E1_1_1_7_13_fu_674_p3;
reg   [31:0] E1_1_1_10_fu_84;
wire   [31:0] E1_1_1_6_fu_667_p3;
reg   [31:0] E1_1_1_11_fu_88;
wire   [31:0] E1_1_1_5_fu_660_p3;
wire   [0:0] tmp_3_fu_324_p1;
wire   [31:0] E1_1_1_7_fu_328_p3;
wire   [31:0] E1_1_0_7_fu_336_p3;
wire   [31:0] E1_0_1_7_fu_344_p3;
wire   [31:0] E1_0_0_7_fu_352_p3;
wire   [31:0] D1_1_1_1_fu_473_p3;
wire   [31:0] D1_1_1_2_fu_480_p3;
wire   [31:0] D1_1_1_fu_487_p3;
wire   [31:0] D1_1_1_3_fu_494_p3;
wire   [0:0] tmp_8_fu_577_p1;
wire   [30:0] tmp_9_fu_581_p1;
wire   [30:0] tmp_10_fu_585_p1;
wire   [30:0] tmp_12_fu_597_p1;
wire   [30:0] tmp_13_fu_601_p1;
wire   [30:0] tmp_11_fu_589_p3;
wire   [30:0] tmp_14_fu_605_p3;
wire   [30:0] tmp_15_fu_613_p3;
wire   [31:0] E1_1_0_fu_620_p3;
wire   [31:0] E1_1_1_1_fu_628_p3;
wire   [31:0] E1_1_1_2_11_fu_636_p3;
wire   [31:0] E1_1_1_12_fu_644_p3;
wire   [31:0] E1_1_1_3_fu_652_p3;
wire   [0:0] tmp_16_fu_747_p1;
wire   [31:0] E1_load13_phi_fu_751_p3;
wire   [31:0] E1_load12_phi_fu_759_p3;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'b1;
end

Matrix_Addition_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
Matrix_Addition_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == exitcond2_fu_565_p2))) begin
        E1_1_1_10_fu_84 <= E1_1_1_6_fu_667_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond5_fu_408_p2))) begin
        E1_1_1_10_fu_84 <= E1_1_load_reg_821;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == exitcond2_fu_565_p2))) begin
        E1_1_1_11_fu_88 <= E1_1_1_5_fu_660_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond5_fu_408_p2))) begin
        E1_1_1_11_fu_88 <= E1_1_1_load_reg_826;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == exitcond2_fu_565_p2))) begin
        E1_1_1_4_fu_76 <= E1_1_1_8_fu_681_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond5_fu_408_p2))) begin
        E1_1_1_4_fu_76 <= E1_load_reg_811;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == exitcond2_fu_565_p2))) begin
        E1_1_1_9_fu_80 <= E1_1_1_7_13_fu_674_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond5_fu_408_p2))) begin
        E1_1_1_9_fu_80 <= E1_0_1_load_reg_816;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond6_fu_312_p2))) begin
        i1_reg_116 <= i_reg_834;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i1_reg_116 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond4_fu_446_p2))) begin
        i3_reg_138 <= i_1_reg_882;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(exitcond7_fu_296_p2 == 1'b0))) begin
        i3_reg_138 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == exitcond2_fu_565_p2))) begin
        i5_reg_182 <= i_2_reg_957;
    end else if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond5_fu_408_p2))) begin
        i5_reg_182 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~(1'b0 == exitcond3_fu_549_p2))) begin
        i7_reg_228 <= ap_const_lv2_0;
    end else if (((1'b1 == ap_CS_fsm_state10) & ~(1'b0 == exitcond_fu_735_p2))) begin
        i7_reg_228 <= i_3_reg_982;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~(1'b0 == exitcond3_fu_549_p2))) begin
        indvars_iv_reg_204 <= ap_const_lv3_2;
    end else if (((1'b1 == ap_CS_fsm_state10) & ~(1'b0 == exitcond_fu_735_p2))) begin
        indvars_iv_reg_204 <= indvars_iv_next_fu_781_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_296_p2 == 1'b0))) begin
        j2_reg_127 <= ap_const_lv2_0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond6_fu_312_p2))) begin
        j2_reg_127 <= j_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j4_reg_161 <= j_1_reg_931;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond5_fu_408_p2))) begin
        j4_reg_161 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == exitcond3_fu_549_p2))) begin
        j6_reg_193 <= ap_const_lv2_0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == exitcond2_fu_565_p2))) begin
        j6_reg_193 <= j_2_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'b0 == exitcond_fu_735_p2))) begin
        j8_reg_249 <= j_3_fu_741_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == exitcond1_fu_708_p2))) begin
        j8_reg_249 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_1_reg_172 <= tmp_reg_949;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond5_fu_408_p2))) begin
        k_1_reg_172 <= k_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~(1'b0 == exitcond3_fu_549_p2))) begin
        k_2_reg_216 <= ap_const_lv3_0;
    end else if (((1'b1 == ap_CS_fsm_state10) & ~(1'b0 == exitcond_fu_735_p2))) begin
        k_2_reg_216 <= k_5_reg_987;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'b0 == exitcond_fu_735_p2))) begin
        k_3_reg_239 <= tmp_7_fu_775_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == exitcond1_fu_708_p2))) begin
        k_3_reg_239 <= k_2_reg_216;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond4_fu_446_p2))) begin
        k_reg_149 <= k_4_reg_887;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(exitcond7_fu_296_p2 == 1'b0))) begin
        k_reg_149 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        D1_1_1_10_fu_68 <= D1_1_1_6_fu_508_p3;
        D1_1_1_11_fu_72 <= D1_1_1_5_fu_501_p3;
        D1_1_1_4_fu_60 <= D1_1_1_8_fu_522_p3;
        D1_1_1_9_fu_64 <= D1_1_1_7_fu_515_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond6_fu_312_p2))) begin
        E1_0_1_fu_48 <= E1_0_1_2_fu_374_p3;
        E1_1_1_fu_56 <= E1_1_1_2_fu_360_p3;
        E1_1_fu_52 <= E1_1_0_2_fu_367_p3;
        E1_fu_44 <= E1_0_0_2_fu_381_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        E1_0_1_load_reg_816 <= E1_0_1_fu_48;
        E1_1_1_load_reg_826 <= E1_1_1_fu_56;
        E1_1_load_reg_821 <= E1_1_fu_52;
        E1_load_reg_811 <= E1_fu_44;
        i_reg_834 <= i_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_882 <= i_1_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_2_reg_957 <= i_2_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_3_reg_982 <= i_3_fu_714_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_1_reg_931 <= j_1_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond5_fu_408_p2))) begin
        k_4_reg_887 <= k_4_fu_420_p2;
        tmp_2_reg_892 <= tmp_2_fu_426_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == exitcond1_fu_708_p2))) begin
        k_5_reg_987 <= k_5_fu_720_p2;
        tmp_6_reg_992 <= tmp_6_fu_726_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_296_p2 == 1'b0))) begin
        tmp_1_reg_839 <= tmp_1_fu_308_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == exitcond3_fu_549_p2))) begin
        tmp_4_reg_962 <= tmp_4_fu_561_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == exitcond4_fu_446_p2))) begin
        tmp_5_reg_941 <= tmp_5_fu_463_p1;
        tmp_reg_949 <= tmp_fu_467_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        D_EN_A = 1'b1;
    end else begin
        D_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        E_EN_A = 1'b1;
    end else begin
        E_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'b0 == exitcond_fu_735_p2))) begin
        E_WEN_A = ap_const_lv4_F;
    end else begin
        E_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == exitcond1_fu_708_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == exitcond1_fu_708_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(exitcond7_fu_296_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == exitcond6_fu_312_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (~(1'b0 == exitcond5_fu_408_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (~(1'b0 == exitcond4_fu_446_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (~(1'b0 == exitcond3_fu_549_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (~(1'b0 == exitcond2_fu_565_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (~(1'b0 == exitcond1_fu_708_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (~(1'b0 == exitcond_fu_735_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign D1_1_1_1_fu_473_p3 = ((tmp_5_reg_941[0:0] === 1'b1) ? D_Dout_A : D1_1_1_11_fu_72);

assign D1_1_1_2_fu_480_p3 = ((tmp_5_reg_941[0:0] === 1'b1) ? D1_1_1_10_fu_68 : D_Dout_A);

assign D1_1_1_3_fu_494_p3 = ((tmp_5_reg_941[0:0] === 1'b1) ? D1_1_1_4_fu_60 : D_Dout_A);

assign D1_1_1_5_fu_501_p3 = ((tmp_2_reg_892[0:0] === 1'b1) ? D1_1_1_1_fu_473_p3 : D1_1_1_11_fu_72);

assign D1_1_1_6_fu_508_p3 = ((tmp_2_reg_892[0:0] === 1'b1) ? D1_1_1_2_fu_480_p3 : D1_1_1_10_fu_68);

assign D1_1_1_7_fu_515_p3 = ((tmp_2_reg_892[0:0] === 1'b1) ? D1_1_1_9_fu_64 : D1_1_1_fu_487_p3);

assign D1_1_1_8_fu_522_p3 = ((tmp_2_reg_892[0:0] === 1'b1) ? D1_1_1_4_fu_60 : D1_1_1_3_fu_494_p3);

assign D1_1_1_fu_487_p3 = ((tmp_5_reg_941[0:0] === 1'b1) ? D_Dout_A : D1_1_1_9_fu_64);

assign D_Addr_A = k_1_cast1_fu_458_p1 << ap_const_lv32_2;

assign D_Clk_A = ap_clk;

assign D_Din_A = ap_const_lv32_0;

assign D_Rst_A = ap_rst_n_inv;

assign D_WEN_A = ap_const_lv4_0;

assign E1_0_0_2_fu_381_p3 = ((tmp_1_reg_839[0:0] === 1'b1) ? E1_fu_44 : E1_0_0_7_fu_352_p3);

assign E1_0_0_7_fu_352_p3 = ((tmp_3_fu_324_p1[0:0] === 1'b1) ? E1_fu_44 : ap_const_lv32_0);

assign E1_0_1_2_fu_374_p3 = ((tmp_1_reg_839[0:0] === 1'b1) ? E1_0_1_fu_48 : E1_0_1_7_fu_344_p3);

assign E1_0_1_7_fu_344_p3 = ((tmp_3_fu_324_p1[0:0] === 1'b1) ? ap_const_lv32_0 : E1_0_1_fu_48);

assign E1_1_0_2_fu_367_p3 = ((tmp_1_reg_839[0:0] === 1'b1) ? E1_1_0_7_fu_336_p3 : E1_1_fu_52);

assign E1_1_0_7_fu_336_p3 = ((tmp_3_fu_324_p1[0:0] === 1'b1) ? E1_1_fu_52 : ap_const_lv32_0);

assign E1_1_0_fu_620_p3 = {{tmp_15_fu_613_p3}, {1'b0}};

assign E1_1_1_12_fu_644_p3 = ((tmp_8_fu_577_p1[0:0] === 1'b1) ? E1_1_0_fu_620_p3 : E1_1_1_9_fu_80);

assign E1_1_1_1_fu_628_p3 = ((tmp_8_fu_577_p1[0:0] === 1'b1) ? E1_1_0_fu_620_p3 : E1_1_1_11_fu_88);

assign E1_1_1_2_11_fu_636_p3 = ((tmp_8_fu_577_p1[0:0] === 1'b1) ? E1_1_1_10_fu_84 : E1_1_0_fu_620_p3);

assign E1_1_1_2_fu_360_p3 = ((tmp_1_reg_839[0:0] === 1'b1) ? E1_1_1_7_fu_328_p3 : E1_1_1_fu_56);

assign E1_1_1_3_fu_652_p3 = ((tmp_8_fu_577_p1[0:0] === 1'b1) ? E1_1_1_4_fu_76 : E1_1_0_fu_620_p3);

assign E1_1_1_5_fu_660_p3 = ((tmp_4_reg_962[0:0] === 1'b1) ? E1_1_1_1_fu_628_p3 : E1_1_1_11_fu_88);

assign E1_1_1_6_fu_667_p3 = ((tmp_4_reg_962[0:0] === 1'b1) ? E1_1_1_2_11_fu_636_p3 : E1_1_1_10_fu_84);

assign E1_1_1_7_13_fu_674_p3 = ((tmp_4_reg_962[0:0] === 1'b1) ? E1_1_1_9_fu_80 : E1_1_1_12_fu_644_p3);

assign E1_1_1_7_fu_328_p3 = ((tmp_3_fu_324_p1[0:0] === 1'b1) ? ap_const_lv32_0 : E1_1_1_fu_56);

assign E1_1_1_8_fu_681_p3 = ((tmp_4_reg_962[0:0] === 1'b1) ? E1_1_1_4_fu_76 : E1_1_1_3_fu_652_p3);

assign E1_load12_phi_fu_759_p3 = ((tmp_16_fu_747_p1[0:0] === 1'b1) ? E1_1_1_9_fu_80 : E1_1_1_4_fu_76);

assign E1_load13_phi_fu_751_p3 = ((tmp_16_fu_747_p1[0:0] === 1'b1) ? E1_1_1_11_fu_88 : E1_1_1_10_fu_84);

assign E_Addr_A = k_3_cast4_fu_730_p1 << ap_const_lv32_2;

assign E_Clk_A = ap_clk;

assign E_Din_A = ((tmp_6_reg_992[0:0] === 1'b1) ? E1_load13_phi_fu_751_p3 : E1_load12_phi_fu_759_p3);

assign E_Rst_A = ap_rst_n_inv;

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_708_p2 = ((i7_reg_228 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign exitcond2_fu_565_p2 = ((j6_reg_193 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign exitcond3_fu_549_p2 = ((i5_reg_182 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign exitcond4_fu_446_p2 = ((j4_reg_161 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign exitcond5_fu_408_p2 = ((i3_reg_138 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign exitcond6_fu_312_p2 = ((j2_reg_127 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign exitcond7_fu_296_p2 = ((i1_reg_116 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign exitcond_fu_735_p2 = ((k_3_reg_239 == indvars_iv_reg_204) ? 1'b1 : 1'b0);

assign i_1_fu_414_p2 = (i3_reg_138 + ap_const_lv2_1);

assign i_2_fu_555_p2 = (i5_reg_182 + ap_const_lv2_1);

assign i_3_fu_714_p2 = (i7_reg_228 + ap_const_lv2_1);

assign i_fu_302_p2 = (i1_reg_116 + ap_const_lv2_1);

assign indvars_iv_next_fu_781_p2 = (indvars_iv_reg_204 + ap_const_lv3_2);

assign j_1_fu_452_p2 = (j4_reg_161 + ap_const_lv2_1);

assign j_2_fu_571_p2 = (j6_reg_193 + ap_const_lv2_1);

assign j_3_fu_741_p2 = (j8_reg_249 + ap_const_lv2_1);

assign j_fu_318_p2 = (j2_reg_127 + ap_const_lv2_1);

assign k_1_cast1_fu_458_p1 = k_1_reg_172;

assign k_3_cast4_fu_730_p1 = k_3_reg_239;

assign k_4_fu_420_p2 = (ap_const_lv3_2 + k_reg_149);

assign k_5_fu_720_p2 = (ap_const_lv3_2 + k_2_reg_216);

assign tmp_10_fu_585_p1 = D1_1_1_10_fu_68[30:0];

assign tmp_11_fu_589_p3 = ((tmp_8_fu_577_p1[0:0] === 1'b1) ? tmp_9_fu_581_p1 : tmp_10_fu_585_p1);

assign tmp_12_fu_597_p1 = D1_1_1_9_fu_64[30:0];

assign tmp_13_fu_601_p1 = D1_1_1_4_fu_60[30:0];

assign tmp_14_fu_605_p3 = ((tmp_8_fu_577_p1[0:0] === 1'b1) ? tmp_12_fu_597_p1 : tmp_13_fu_601_p1);

assign tmp_15_fu_613_p3 = ((tmp_4_reg_962[0:0] === 1'b1) ? tmp_11_fu_589_p3 : tmp_14_fu_605_p3);

assign tmp_16_fu_747_p1 = j8_reg_249[0:0];

assign tmp_1_fu_308_p1 = i1_reg_116[0:0];

assign tmp_2_fu_426_p1 = i3_reg_138[0:0];

assign tmp_3_fu_324_p1 = j2_reg_127[0:0];

assign tmp_4_fu_561_p1 = i5_reg_182[0:0];

assign tmp_5_fu_463_p1 = j4_reg_161[0:0];

assign tmp_6_fu_726_p1 = i7_reg_228[0:0];

assign tmp_7_fu_775_p2 = (ap_const_lv3_1 + k_3_reg_239);

assign tmp_8_fu_577_p1 = j6_reg_193[0:0];

assign tmp_9_fu_581_p1 = D1_1_1_11_fu_72[30:0];

assign tmp_fu_467_p2 = (ap_const_lv3_1 + k_1_reg_172);

endmodule //Matrix_Addition
