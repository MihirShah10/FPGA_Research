#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>

#include "xparameters.h"
#include "xil_printf.h"
#include "xil_cache.h"
#include "ff.h"
#include "xdevcfg.h"
#include "xil_io.h"
#include "xil_types.h"
#include "xbasic_types.h"
#include "xil_exception.h"
#include "xsdps.h"
#include "math.h"
#include "string.h"

using namespace std;

const int  image_size =  512;
FRESULT result;			// FRESULT variable

// Generic variables
int sample_block[64*64][64];
short int dc_value[64*64];

// RLE variables
short int rle_data[64*64][128];
short int rle_max_length_buffer[64*64];


int *RLE = (int*)XPAR_RLE_REV2_IP_0_S00_AXI_BASEADDR;

int get_rle(int low_key, int high_key)
{
	for(int row_idx =0; row_idx<64;row_idx++)
	{
		for(int col_idx=0;col_idx<64;col_idx++)
		{
			*(RLE + 194) = 0x0; // Activate Reset
			for(int i = 1000; i >0; i--){;} // 10k original, 1000 gives 13 us delay

			// Inputs to RLE Module
			for(int idx = 0; idx <64; idx ++)
			{
				*(RLE + idx) = 0x0;
			}

			*(RLE + 194) = 0x1; // Reactive Reset and start sending input signals
			for(int i = 1000; i >0; i--){;} // 10k original, 1000 gives 13 us delay

			for(int count=0;count<50;count++){
				while(!(*(RLE + 193)==1));// Check Valid Signal is active or not
			}
			rle_max_length_buffer[col_idx + (row_idx*64)] = *(RLE+192);

			// Sample the Outputs
			for(int m=0;m<rle_max_length_buffer[col_idx + (row_idx*64)]; m++)
			{
				if(m==0)
				{
					if(row_idx==0 && col_idx==0)
					{
						rle_data[col_idx + (row_idx*64)][m] = ((quantz_data[col_idx + (row_idx*64)][0]));
					}
					else{
						rle_data[col_idx + (row_idx*64)][m] = ((quantz_data[col_idx + (row_idx*64)][0]) -(quantz_data[(col_idx + (row_idx*64))-1][0]));
					}
				}
				else
				{
					rle_data[col_idx + (row_idx*64)][m] = *(RLE + m + 64);
				}

			}

			for(int e=rle_max_length_buffer[col_idx + (row_idx*64)]; e<128; e++)
			{
				rle_data[col_idx + (row_idx*64)][e]=0x0;
			}

			*(RLE + 194) = 0x0; // Activate Reset
			for(int i = 1000; i >0; i--){;} // 10k original, 1000 gives 13 us delay

		}
	}
	return 0;
}


int main()
{

	get_rle(low_key, high_key);

    return 0;
}
